webpackJsonp([0],{"+6q2":function(t,e,n){t.exports=n.p+"static/img/main3.30ff4b9.jpg"},"2FPK":function(t,e){},"2njX":function(t,e,n){t.exports=n.p+"static/img/c15.25b62d7.gif"},"3saa":function(t,e){},"5+ey":function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},"74kJ":function(t,e){},"7Otq":function(t,e,n){t.exports=n.p+"static/img/logo.74363f3.png"},A8NZ:function(t,e,n){t.exports=n.p+"static/img/c7.b7045c8.gif"},AUyU:function(t,e){},Ae3H:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}();var n={initData:[],arrNow:[],showChart:null,dataChangeIndex:null,treeinorderObjectArr:[],treeinorderObjectLinks:[],changeChart:null,treeinorderDataChangeIndex:[-1]};n.posIdMap=new Map,n.dataClear=function(){n.initData=[],n.arrNow=[],n.showChart=null,n.dataChangeIndex=null,n.treeinorderObjectArr=[],n.treeinorderObjectLinks=[],n.changeChart=null,n.treeinorderDataChangeIndex=[-1],n.posIdMap=new Map},n.initTreeInorderDataChart=function(t,e){console.log("initTreeInorderChart");var n=echarts.init(t),o={title:{text:e.chartTitle},tooltip:{formatter:function(t){return t.data.name}},animationDurationUpdate:300,animationEasingUpdate:"quinticInOut",series:[{type:e.chartType,layout:"none",symbolSize:[e.nodeWidth,e.nodeHeight],legendHoverLink:!0,hoverAnimation:!0,roam:!1,width:e.seriesWidth,edgeSymbol:["circle","arrow"],edgeSymbolSize:[4,10],edgeLabel:{fontSize:20},label:{show:!0,position:"inside",textStyle:{color:"#130c0e",fontStyle:"normal",fontWeight:"bold",fontFamily:"sans-serif",fontSize:15}},itemStyle:{color:e.itemColor[0]},data:e.chartData,links:e.chartLinks,lineStyle:{color:"#409EFF",opacity:1,width:3,curveness:0}}]};return n.setOption(o),n},n.initTreeInorderChart=function(t){return l.setGraphData(n.arrNow,o.latestCode,n.treeinorderObjectArr,n.treeinorderObjectLinks),n.initTreeInorderDataChart(t,l.setGraphAttr(l.treeinorderAttr))},n.setTreeInorderChartOption=function(t,e,n,o){t.setOption({title:{text:o.chartTitle,subtext:"",subtextStyle:{color:"blue",fontWeight:"bold",fontSize:20}},series:[{type:o.chartType,layout:"none",symbolSize:[o.nodeWidth,o.nodeHeight],legendHoverLink:!0,hoverAnimation:!0,roam:!1,width:o.seriesWidth,edgeSymbol:["circle","arrow"],edgeSymbolSize:[4,10],edgeLabel:{fontSize:20},label:{show:!0,position:"inside",textStyle:{color:"#130c0e",fontStyle:"normal",fontWeight:"bold",fontFamily:"sans-serif",fontSize:15}},itemStyle:{color:-1!=n[0]?function(t){for(var l=[],a=0;a<e.length;a++)a==n[0]?l.push(o.itemColor[1]):l.push(o.itemColor[0]);return l[t.dataIndex]}:o.itemColor[0]},data:e,links:o.chartLinks,lineStyle:{opacity:1,width:3,curveness:0}}]})},n.treeinorderChangeChart=function(t,e,o,a){if(!t){for(let t=0;t<a.length;t++)a[t]=-1;n.treeinorderObjectArr.splice(0,n.treeinorderObjectArr.length),n.treeinorderObjectLinks.splice(0,n.treeinorderObjectLinks.length),ustc_vp.utils.sourceToDest(n.initData,o)}l.arrToTreeInorderChartDataObjArr(o,n.treeinorderObjectArr),n.treeinorderObjectLinks.splice(0,n.treeinorderObjectLinks.length);let r=n.treeinorderObjectArr.length;for(let t=1;t<r;t++){let e=n.treeinorderObjectArr[t].pos>>1;if(void 0==n.posIdMap.get(e))throw Error("当前节点没有父节点");n.treeinorderObjectLinks.push({source:n.posIdMap.get(e),target:n.treeinorderObjectArr[t].id,label:{normal:{show:!0,formatter:n.treeinorderObjectArr[t].direction}}})}n.setTreeInorderChartOption(e,n.treeinorderObjectArr,a,l.setGraphAttr(l.treeinorderAttr))};var o={workspace:null,outputArea:null,showCodeArea:null,hasMoreCode:!0,highlightPause:!1,codeInterpreter:null,latestCode:"",addCode:"",customizeApi:{},algAddCode:null,dataClear:function(){o.workspace=null,o.outputArea=null,o.showCodeArea=null,o.hasMoreCode=!0,o.highlightPause=!1,o.codeInterpreter=null,o.latestCode="",o.addCode="",o.customizeApi={},o.algAddCode=null},getWorkspaceXML:function(t){var e=null;try{if(window.ActiveXObject)(e=new ActiveXObject("Msxml2.DOMDocument")).async=!1,e.load(t);else{if(!document.implementation||!document.implementation.createDocument)throw Error("浏览器无内建的XML解析器！");var n=new window.XMLHttpRequest;n.open("GET",t,!1),n.send(null),e=n.responseXML.documentElement}}catch(t){throw Error("XML文件读取失败！"+t)}if(null==e)throw Error("XML文件读取失败！");return console.log("获取xml对象成功！"),e},initBlockly:function(t,e){console.log("initBlockly");var n={collapse:!0,comments:!1,disable:!0,maxBlocks:1/0,trashcan:!1,horizontalLayout:!1,toolboxPosition:"start",css:!0,media:e,rtl:!1,scrollbars:!0,sounds:!0,oneBasedIndex:!0};return Blockly.inject(t,n)},injectCustomizeApi:function(){o.algAddCode(),o.generateAddCodeToString(o.customizeApi)},updateShowCode:function(t,e){e.value=Blockly.JavaScript.workspaceToCode(t)},resetStepUi:function(t){o.workspace.highlightBlock(null),o.highlightPause=!1,t&&(o.outputArea.value="Program output:\n=================")},highlightBlock:function(t){o.workspace.highlightBlock(t),o.highlightPause=!0},initInterpretApi:function(t,e){t.setProperty(e,"alert",t.createNativeFunction(function(t){t=arguments.length?t:"",o.outputArea.value+="\n"+t}));t.setProperty(e,"highlightBlock",t.createNativeFunction(function(e){return e=String(e||""),t.createPrimitive(o.highlightBlock(e))}));for(let n in o.customizeApi)t.setProperty(e,n.toString(),t.createNativeFunction(o.customizeApi[n][1]))},addApi:function(t,e,n,o){t[e.toString()]=[n,o]},generateAddCodeToString:function(t){for(let e in t)o.addCode+=t[e][0]},generateCodeAndLoadIntoInterpreter:function(t,e){Blockly.JavaScript.STATEMENT_PREFIX="highlightBlock(%1);\n"+t,Blockly.JavaScript.addReservedWords("highlightBlock"),o.latestCode=Blockly.JavaScript.workspaceToCode(e),o.resetStepUi(!0)},getCurrInTreePosition:function(t,e){t==e?n.dataChangeIndex[0]=1:o.dfsInTree(t,e,1)},dfsInTree:function(t,e,l){return t==e?(n.dataChangeIndex[0]=l,!0):null!=t&&(o.dfsInTree(t.a.left,e,2*l)||o.dfsInTree(t.a.right,e,2*l+1))},getCurrWrapper:function(t,e){return void 0!=t&&void 0!=e&&(o.getCurrInTreePosition(t,e),n.dataChangeIndex[0]=n.posIdMap.get(n.dataChangeIndex[0]),!0)},gettreeinorderArgsWrapper:function(t,e){o.getCurrWrapper(t,e)&&n.changeChart(o.hasMoreCode,n.showChart,n.arrNow,n.dataChangeIndex)},printStrWrapper:function(t){console.log(t)},treeinorderAlgAddCode:function(){o.addApi(o.customizeApi,"gettreeinorderArgs","gettreeinorderArgs(root, curr);\n",o.gettreeinorderArgsWrapper)}},l={treeinorderAttr:{title:"树中序遍历算法",type:"graph",nodeWidth:50,nodeHeight:50,color:["#d71345","#ffe600"]},TreeNode:function(t,e,n){this.value=t,void 0==this.left?this.left=null:this.left=e,void 0==this.right?this.right=null:this.right=n},deserialize:function(t){if(0==t.length)return null;let e=new l.TreeNode(t[0]);t.shift();let n=[e];for(;n.length>0;){let e=n.shift(),o=t.shift();null!=o&&(e.left=new l.TreeNode(o),n.push(e.left));let a=t.shift();null!=a&&(e.right=new l.TreeNode(a),n.push(e.right))}return e},getTreeNodePosition:function(t){let e=[];if(null==t)return e;let n=[t],o=0;e.push({id:o++,name:"root\n"+t.value,pos:1,direction:null});let l=[1];for(;n.length>0;){let t=l.shift(),a=n.shift(),r=a.left;null!=r&&(l.push(2*t),e.push({id:o++,name:""+r.value,pos:2*t,direction:"left"}),n.push(r));let i=a.right;null!=i&&(l.push(2*t+1),e.push({id:o++,name:""+i.value,pos:2*t+1,direction:"right"}),n.push(i))}return e},setTreeNodeCoordinate:function(t){let e=ustc_vp.utils.getTopY(t[t.length-1].pos),n=ustc_vp.utils.getTreeCoordinate(e);for(let e in t){let o=t[e].pos;t[e].x=n[o-1].x,t[e].y=n[o-1].y}return t},getArrInitData:function(t){if(null==t||void 0==t||""==t)throw Error("getArrInitData()：获取初始化图表数据失败，Blockly未完全加载！！！");{let e=t.split(";"),o=-1;for(let t in e)if(-1!=(o=e[t].indexOf("deserialize(["))){o=t;break}if(-1==o)throw Error("getArrInitData()：没有数据！！！");let l=e[o];console.log("获取初始数据："+l);let a=l.split("[")[1].split("]")[0].split(",");for(let t in a)" null"!=a[t]?n.initData.push(parseInt(a[t])):n.initData.push(null);ustc_vp.utils.sourceToDest(n.initData,n.arrNow)}},arrToTreeInorderChartDataObjArr:function(t,e){if(0==e.length){let n=[];ustc_vp.utils.sourceToDest(t,n);let o=l.deserialize(n);ustc_vp.utils.sourceToDest(l.setTreeNodeCoordinate(l.getTreeNodePosition(o)),e)}},setGraphData:function(t,e,o,a){l.getArrInitData(e),l.arrToTreeInorderChartDataObjArr(t,o);let r=o.length;for(let t=0;t<r;t++)n.posIdMap.set(o[t].pos,o[t].id);for(let t=1;t<r;t++){let e=o[t].pos>>1;if(void 0==n.posIdMap.get(e))throw Error("当前节点没有父节点");a.push({source:n.posIdMap.get(e),target:o[t].id,label:{normal:{show:!0,formatter:o[t].direction}}})}},setGraphAttr:function(t){return{chartTitle:t.title,chartType:t.type,chartData:n.treeinorderObjectArr,chartLinks:n.treeinorderObjectLinks,nodeWidth:t.nodeWidth,nodeHeight:t.nodeHeight,itemColor:t.color}},getGraphChangeIndex:function(t,e){return t.length==e.length+1}}},Basj:function(t,e){},C1j0:function(t,e,n){t.exports=n.p+"static/img/about1.f8bc116.png"},CMoP:function(t,e){},E6e7:function(t,e,n){t.exports=n.p+"static/img/c10.15d65ac.gif"},F83G:function(t,e,n){t.exports=n.p+"static/img/mainpage2.f814bc1.png"},FGIJ:function(t,e,n){t.exports=n.p+"static/img/ustc60.9592607.jpg"},FuZX:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},IlB7:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},JS0P:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},LGJH:function(t,e,n){t.exports=n.p+"static/img/c1.61445f6.gif"},Mk2S:function(t,e,n){t.exports=n.p+"static/img/c9.8c78e15.gif"},NHnr:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o={name:"Header",data:()=>({}),mounted:function(){},methods:{}},l={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{id:"header"}},[e("a",{attrs:{id:"logo"}},[e("router-link",{attrs:{to:"/algs"}},[e("img",{attrs:{src:n("7Otq"),alt:"website's logo"}})])],1),this._v(" "),e("el-menu",{staticClass:"el-nav",attrs:{"default-active":this.$route.path,router:!0,mode:"horizontal"}},[e("el-menu-item",{attrs:{index:"/home"}},[this._v("首页")]),this._v(" "),e("el-menu-item",{attrs:{index:"/algs"}},[this._v("算法学习")]),this._v(" "),e("el-menu-item",{attrs:{index:"/about"}},[this._v("关于")])],1)],1)},staticRenderFns:[]};var a=n("VU/8")(o,l,!1,function(t){n("z7rs")},"data-v-392fdf74",null).exports,r={render:function(){this.$createElement;this._self._c;return this._m(0)},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{id:"footer"}},[e("span",{attrs:{id:"logo"}},[e("img",{staticClass:"el-image",attrs:{src:n("FGIJ"),alt:"footerlogo"}})]),this._v(" "),e("span",{staticClass:"footer-span"},[this._v("Copyright  © 2020:软件学院工程实践小组")])])}]};var i={name:"app",components:{Footer:n("VU/8")({name:"Footer"},r,!1,function(t){n("e/+E")},"data-v-f2eeec2a",null).exports,Header:a},created:function(){}},s={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{id:"app"}},[e("el-container",[e("el-header",{staticStyle:{position:"sticky",top:"0","z-index":"3000","background-color":"white"}},[e("Header")],1),this._v(" "),e("el-main",{attrs:{id:"el-main"}},[e("router-view")],1),this._v(" "),e("el-footer",[e("Footer")],1)],1)],1)},staticRenderFns:[]};var c=n("VU/8")(i,s,!1,function(t){n("Tl52")},null,null).exports,p={name:"Carousel",data:()=>({imgs:[{index:1,title:"程序展示",url:n("+6q2"),route:"/algs"},{index:2,title:"关于Google Blockly",url:n("F83G"),route:"/about"},{index:3,title:"惊喜小游戏",url:n("bhGx"),route:"/algs"}]})},d={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticStyle:{"margin-bottom":"0","margin-top":"20px"}},[n("el-carousel",{attrs:{"indicator-position":"outside",height:"530px",type:"demonstration"}},t._l(t.imgs,function(e){return n("el-carousel-item",{key:e.index,attrs:{name:e.title}},[n("router-link",{attrs:{to:e.route}},[n("img",{attrs:{src:e.url,alt:"main"}})]),t._v(" "),n("h2",[t._v(t._s(e.title))])],1)}),1)],1)},staticRenderFns:[]};var g={name:"Home",components:{Carousel:n("VU/8")(p,d,!1,function(t){n("AUyU")},"data-v-a2c586c6",null).exports}},m={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{id:"home"}},[e("div",{attrs:{id:"show-carousel"}},[e("Carousel")],1)])},staticRenderFns:[]};var y=n("VU/8")(g,m,!1,function(t){n("2FPK")},"data-v-5a5f9ff2",null).exports,f=n("lRwf");var v=new(n.n(f).a)({}),u={name:"CategoryCards",props:{},created(){console.log("created"),v.$on("rowId",function(t){let e=this.$el.querySelector("#"+t);document.documentElement.scrollTop=e.offsetTop-66}.bind(this))},data:function(){return{categoryDatas:[{index:1,category:"array",categoryName:"数组",cards:[{id:1,difficulty:"easy",name:"arrayInsertAlg",imgUrl:n("LGJH"),createdTime:"2020.1.30",title:"还书"},{id:2,difficulty:"easy",name:"arrayDeleteAlg",imgUrl:n("hda+"),createdTime:"2020.1.30",title:"抽纸牌"},{id:3,difficulty:"medium",name:"bubbleSortAlg",imgUrl:n("R473"),createdTime:"2020.1.30",title:"冒泡排序"},{id:4,difficulty:"medium",name:"insertSortAlg",imgUrl:n("Y0XD"),createdTime:"2020.1.31",title:"插入排序"},{id:5,difficulty:"medium",name:"selectSortAlg",imgUrl:n("w5qZ"),createdTime:"2020.1.32",title:"选择排序"},{id:6,difficulty:"hard",name:"quickSortAlg",imgUrl:n("aCWD"),createdTime:"2020.1.30",title:"快速排序"}]},{index:2,category:"stack",categoryName:"栈",cards:[{id:1,name:"stackPopAlg",difficulty:"easy",imgUrl:n("A8NZ"),createdTime:"2020.1.30",title:"括号匹配Ⅰ"},{id:2,name:"stackPushAlg",difficulty:"easy",imgUrl:n("T8Fs"),createdTime:"2020.1.31",title:"括号匹配Ⅱ"},{id:3,name:"stackOverAllAlg",difficulty:"hard",imgUrl:n("Mk2S"),createdTime:"2020.1.32",title:"四则运算"}]},{index:3,category:"queue",categoryName:"队列",cards:[{id:1,name:"queuePushAlg",difficulty:"easy",imgUrl:n("E6e7"),createdTime:"2020.1.30",title:"管道Ⅰ"},{id:2,name:"queuePopAlg",difficulty:"easy",imgUrl:n("y6Bo"),createdTime:"2020.1.31",title:"管道Ⅱ"},{id:3,name:"queueOverAllAlg",difficulty:"medium",imgUrl:n("oaD1"),createdTime:"2020.1.32",title:"管道Ⅲ"}]},{index:4,category:"linklist",categoryName:"链表",cards:[{id:1,name:"linklistSearchAlg",difficulty:"easy",imgUrl:n("2njX"),createdTime:"2020.1.32",title:"查找车厢"},{id:2,name:"linklistDeleteAlg",difficulty:"hard",imgUrl:n("YRCl"),createdTime:"2020.1.31",title:"拆除车厢"},{id:3,name:"linklistInsertAlg",difficulty:"hard",imgUrl:n("PTIU"),createdTime:"2020.1.30",title:"改变RNA"}]},{index:5,category:"tree",categoryName:"树",cards:[{id:1,name:"treeBfsAlg",difficulty:"medium",imgUrl:n("YFjE"),createdTime:"2020.1.30",title:"广度优先遍历"},{id:2,name:"treePreOrderAlg",difficulty:"medium",imgUrl:n("NMnU"),createdTime:"2020.1.31",title:"先序遍历"},{id:3,name:"treeInOrderAlg",difficulty:"medium",imgUrl:n("ivly"),createdTime:"2020.1.32",title:"中序遍历"},{id:4,name:"treePosOrderAlg",difficulty:"hard",imgUrl:n("NLJF"),createdTime:"2020.1.31",title:"后序遍历"}]}]}},methods:{}},h={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticStyle:{width:"99%"},attrs:{id:"block"}},t._l(t.categoryDatas,function(e){return n("el-row",{key:e.index,attrs:{gutter:20,id:"anchor-"+e.index}},[n("h2",{staticClass:"h2-style"},[n("a",{staticClass:"header-anchor",attrs:{href:"","aria-hidden":"true"}},[t._v("¶")]),t._v("\n        "+t._s(e.categoryName)+"\n      ")]),t._v(" "),t._l(e.cards,function(e){return n("el-col",{key:e.id,staticStyle:{"padding-bottom":"20px"},attrs:{span:8,card:e}},[n("router-link",{staticStyle:{"text-decoration":"none"},attrs:{to:{name:"alg",params:{name:e.name}}}},[n("el-card",{staticClass:"el-card",attrs:{"body-style":{padding:"0px"}}},[n("img",{staticClass:"image",staticStyle:{border:"solid 1px white","border-bottom":"solid 1px black"},attrs:{src:e.imgUrl}}),t._v(" "),n("div",{staticStyle:{padding:"10px 10px 10px 10px",height:"50px"},attrs:{id:"card-buttom"}},[n("div",{staticStyle:{float:"left","text-align":"center","margin-left":"20px"}},[n("el-link",{staticStyle:{"font-size":"16px","font-weight":"bold"},attrs:{type:"primary",underline:!1}},[t._v("\n                  "+t._s(e.title)+"\n                ")])],1),t._v(" "),n("router-link",{staticStyle:{"text-decoration":"none"},attrs:{to:{name:"alg",params:{name:e.name}}}},["hard"===e.difficulty?n("el-button",{staticStyle:{float:"right","margin-right":"20px"},attrs:{type:"danger",circle:""}},[t._v("难\n                ")]):"medium"===e.difficulty?n("el-button",{staticStyle:{float:"right","margin-right":"20px"},attrs:{type:"warning",circle:""}},[t._v("中\n                ")]):n("el-button",{staticStyle:{float:"right","margin-right":"20px"},attrs:{type:"success",circle:""}},[t._v("\n                  易\n                ")])],1)],1)])],1)],1)})],2)}),1)},staticRenderFns:[]};var b=n("VU/8")(u,h,!1,function(t){n("XY3D")},"data-v-173730d5",null).exports,k={name:"Sidebar",methods:{getRowId(t){v.$emit("rowId",t.currentTarget.id)}}},w={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("el-row",[n("el-col",{staticClass:"sidebar-col",attrs:{span:20}},[n("h4",{staticStyle:{"text-align":"center"}},[t._v("算法分类")]),t._v(" "),n("el-menu",{staticClass:"el-menu",attrs:{"default-active":this.$route.path}},[n("a",{attrs:{id:"anchor-1",href:"javascript:void(0)"},on:{click:function(e){return t.getRowId(e)}}},[n("el-menu-item",{attrs:{index:"1"}},[n("template",{slot:"title"},[n("i",{staticClass:"el-icon-location"}),t._v(" "),n("span",[t._v("数组")])])],2)],1),t._v(" "),n("a",{attrs:{id:"anchor-2",href:"javascript:void(0)"},on:{click:function(e){return t.getRowId(e)}}},[n("el-menu-item",{attrs:{index:"2"}},[n("template",{slot:"title"},[n("i",{staticClass:"el-icon-location"}),t._v(" "),n("span",[t._v("栈")])])],2)],1),t._v(" "),n("a",{attrs:{id:"anchor-3",href:"javascript:void(0)"},on:{click:function(e){return t.getRowId(e)}}},[n("el-menu-item",{attrs:{index:"3"}},[n("template",{slot:"title"},[n("i",{staticClass:"el-icon-location"}),t._v(" "),n("span",[t._v("队列")])])],2)],1),t._v(" "),n("a",{attrs:{id:"anchor-4",href:"javascript:void(0)"},on:{click:function(e){return t.getRowId(e)}}},[n("el-menu-item",{attrs:{index:"4"}},[n("template",{slot:"title"},[n("i",{staticClass:"el-icon-location"}),t._v(" "),n("span",[t._v("链表")])])],2)],1),t._v(" "),n("a",{attrs:{id:"anchor-5",href:"javascript:void(0)"},on:{click:function(e){return t.getRowId(e)}}},[n("el-menu-item",{attrs:{index:"5"}},[n("template",{slot:"title"},[n("i",{staticClass:"el-icon-location"}),t._v(" "),n("span",[t._v("树")])])],2)],1)])],1)],1)],1)},staticRenderFns:[]};var x=n("VU/8")(k,w,!1,function(t){n("ch58")},"data-v-0bcb84c6",null).exports,_={name:"BackTop",props:{step:{type:Number,default:50}},data:()=>({isActive:!1}),methods:{toTop(t){if(document.documentElement.scrollTop-=t,document.documentElement.scrollTop>0)var e=setTimeout(()=>this.toTop(t),16);else clearTimeout(e)},toBottom(t){var e=document.documentElement.clientHeight||document.body.clientHeight,n=document.documentElement.scrollHeight-e;if(document.documentElement.scrollTop+=t,document.documentElement.scrollTop<n)var o=setTimeout(()=>this.toBottom(t),16);else clearTimeout(o)}},created(){var t=this;window.οnscrοll=function(){document.documentElement.scrollTop>60?t.isActive=!0:t.isActive=!1}}},A={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("div",{staticClass:"scroll",class:{show:t.isActive}},[n("div",{attrs:{id:"toTop"},on:{click:function(e){return t.toTop(t.step)}}},[t._v("<")]),t._v(" "),n("div",{attrs:{id:"toBottom"},on:{click:function(e){return t.toBottom(t.step)}}},[t._v(">")])])])},staticRenderFns:[]};var C={name:"Algs",components:{CategoryCards:b,Sidebar:x,BackTop:n("VU/8")(_,A,!1,function(t){n("CMoP")},"data-v-29ad98a6",null).exports}},T={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",{attrs:{id:"algs"}},[e("BackTop"),this._v(" "),e("el-container",[e("el-aside",{staticClass:"el-aside",staticStyle:{width:"200px"}},[e("Sidebar")],1),this._v(" "),e("el-main",{staticClass:"el-main"},[e("CategoryCards")],1)],1)],1)},staticRenderFns:[]};var S=n("VU/8")(C,T,!1,function(t){n("Basj")},"data-v-f16d7c3a",null).exports,I={name:"About",mounted:function(){},data:()=>({tableData:[{left:"Original author(s)",right:"Neil Fraser,Quynh Neutron, Ellen Spertus, Mark Friedma"},{left:"Developer(s)",right:"Google, MIT"},{left:"Initial release",right:"May 2012; 8 years ago"},{left:"Stable release",right:"1.20190215.0 / 15 February 2019; 16 months ago"},{left:"Preview release",right:"1.20190419.0 / 19 April 2019; 14 months ago"},{left:"Repository",right:"github.com/google/blockly"},{left:"Written in",right:"JavaScript"},{left:"Operating system",right:"Android, iOS"},{left:"Platform",right:"Web browser"},{left:"Size",right:"150 KB"},{left:"Available in",right:"50 languages"},{left:"Type",right:"Library"},{left:"License",right:"Apache 2.0"},{left:"Website",right:"developers.google.com/blockly"}]}),methods:{}},E={render:function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("div",{staticStyle:{"text-align":"left"}},[t._m(0),t._v(" "),o("el-collapse",{on:{change:t.handleChange},model:{value:t.activeNames,callback:function(e){t.activeNames=e},expression:"activeNames"}},[o("el-collapse-item",[o("template",{slot:"title"},[o("i",{staticClass:"el-icon-info",staticStyle:{height:"20px"}},[t._v("  ")]),t._v(" "),o("h2",{staticStyle:{color:"#409EFF"}},[t._v("what is "),o("strong",[t._v("Blockly")]),t._v("?")])]),t._v(" "),o("div",{staticStyle:{"font-size":"20px"}},[o("div",{staticStyle:{width:"600px",display:"inline-block"}},[o("h2",[t._v("what is "),o("strong",[t._v("Blockly")]),t._v("?")]),t._v(" "),o("p",[o("strong",[t._v("Blockly")]),t._v(" is a client-side library for the programming language JavaScript for\n      creating block-based visual programming languages (VPLs) and editors.\n      It is a project of Google and is free and open-source software released under the\n      Apache License 2.0.[1] It typically runs in a web browser, and visually resembles the language Scratch.\n      Blockly is also being implemented for the mobile operating systems Android and iOS,\n      though not all web browser based features are available for these.")]),t._v(" "),o("p",[o("strong",[t._v("Blockly")]),t._v("是一个用于创建基于块的可视化编程语言(VPLs)和编辑器的编程语言JavaScript的客户端库。它是谷歌的一个项目，\n      是基于Apache License 2.0发布的免费开源软件。它通常在web浏览器中运行，在视觉上类似于Scratch语言。\n      Blockly还将在移动操作系统Android和iOS上实现，尽管并非所有基于web浏览器的功能都适用于这些系统。")])]),t._v(" "),o("img",{staticStyle:{display:"inline-block","margin-left":"50px"},attrs:{src:n("C1j0"),height:"300",width:"481"}})])],2),t._v(" "),o("el-collapse-item",[o("template",{slot:"title"},[o("i",{staticClass:"el-icon-info",staticStyle:{height:"20px"}},[t._v("  ")]),t._v(" "),o("h2",{staticStyle:{color:"#409EFF"}},[t._v("Informations about Blockly")])]),t._v(" "),o("div",[o("el-table",{staticStyle:{width:"100%","font-size":"16px"},attrs:{data:t.tableData,"show-header":!1}},[o("el-table-column",{attrs:{prop:"left"}}),t._v(" "),o("el-table-column",{attrs:{prop:"right"}})],1)],1)],2),t._v(" "),o("el-collapse-item",[o("template",{slot:"title"},[o("i",{staticClass:"el-icon-info",staticStyle:{height:"20px"}},[t._v("  ")]),t._v(" "),o("h2",{staticStyle:{color:"#409EFF"}},[t._v("History")])]),t._v(" "),o("div",[o("p",{staticStyle:{"font-size":"20px"}},[t._v("Blockly development began in summer 2011.\n          The first public release was in May 2012 at Maker Faire.\n          Blockly was originally designed as a replacement for OpenBlocks in App Inventor.\n          Neil Fraser began the project with Quynh Neutron,\n          Ellen Spertus, and Mark Friedman as contributors.")]),t._v(" "),o("p",{staticStyle:{"font-size":"20px"}},[o("strong",[t._v("Blockly")]),t._v("开发始于2011年夏天。第一次公开发布是在2012年5月的Maker Faire。"),o("i",[t._v("(P.s.  MakerFaire是美国Make杂志社举办的全世界最大的DIY聚会，是一个展示创意、\n          创新与创造的舞台，一个宣扬创客（Maker)文化的庆典，也是一个适合一家人同时参加的周末嘉年华。)")]),t._v("\n          Blockly最初设计是为了替代App Inventor中的OpenBlocks。Neil Fraser和Quynh Neutron、Ellen Spertus和Mark Friedman\n          一起开始了这个项目。\n        ")])])],2),t._v(" "),o("el-collapse-item",[o("template",{slot:"title"},[o("i",{staticClass:"el-icon-info",staticStyle:{height:"20px"}},[t._v("  ")]),t._v(" "),o("h2",{staticStyle:{color:"#409EFF"}},[t._v("User interface")])]),t._v(" "),o("div",[o("p",{staticStyle:{"font-size":"20px"}},[t._v("\n          The default graphical user interface (GUI) of the Blockly editor consists of a toolbox, which holds\n          available blocks,\n          and where a user can select blocks, and a workspace, where a user can drag and drop and rearrange blocks.\n          The workspace also includes, by default, zoom icons, and a trashcan to delete blocks.\n          The editor can be modified easily to customise and limit the available editing features and blocks.\n        ")]),t._v(" "),o("p",{staticStyle:{"font-size":"20px"}},[o("strong",[t._v("Blockly")]),t._v("编辑器的默认图形用户界面(GUI)包括一个工具箱，其中存放可用的块，用户可以在其中选择块，\n          以及一个工作区，用户可以在其中拖放和重新排列块。默认情况下，工作区还包括缩放图标和用于删除块的垃圾桶。\n          编辑器可以很容易地被修改来定制和限制可用的编辑功能和块。\n        ")])])],2),t._v(" "),o("el-collapse-item",[o("template",{slot:"title"},[o("i",{staticClass:"el-icon-info",staticStyle:{height:"20px"}},[t._v("  ")]),t._v(" "),o("h2",{staticStyle:{color:"#409EFF"}},[t._v("Customization")])]),t._v(" "),o("div",[o("p",{staticStyle:{"font-size":"20px"}},[t._v("\n          Blockly includes a set of visual blocks for common operations, and can be customized by adding more blocks.\n          New blocks require a block definition and a generator. The definition describes the block's appearance (user\n          interface)\n          and the generator describes the block's translation to executable code.\n          Definitions and generators can be written in JavaScript, or using a visual set of blocks, the Block Factory,\n          which allows new blocks to be described using extant visual blocks; the intent is to make creating new\n          blocks easier.\n        ")]),t._v(" "),o("p",{staticStyle:{"font-size":"20px"}},[o("strong",[t._v("Blockly")]),t._v("包括一组用于常见操作的可视化块，可以通过添加更多块进行定制。新块需要一个块定义和一个生成器。\n          定义描述块的外观(用户界面)，生成器描述块到可执行代码的转换。定义和生成器可以用JavaScript编写，或者使用一组可视化的块，\n          即块工厂，它允许使用现有的可视化块来描述新块;这样做的目的是让创建新区块变得更容易。\n        ")])])],2),t._v(" "),o("el-collapse-item",[o("template",{slot:"title"},[o("i",{staticClass:"el-icon-info",staticStyle:{height:"20px"}},[t._v("  ")]),t._v(" "),o("h2",{staticStyle:{color:"#409EFF"}},[t._v("Applications")])]),t._v(" "),o("div",[o("p",{staticStyle:{"font-size":"20px"}},[o("strong",[t._v("Blockly")]),t._v(" is used in several notable projects, including:\n        ")]),t._v(" "),o("ul",{staticStyle:{"font-size":"16px"}},[o("li",[t._v("MIT's App Inventor, to create applications for Android.")]),t._v(" "),o("li",[t._v("Blockly Games, a set of educational games that teach programming concepts such as loops and\n            conditionals.\n          ")]),t._v(" "),o("li",[t._v("Code.org, to teach introductory programing to millions of students in their Hour of Code program.")]),t._v(" "),o("li",[t._v("RoboBlockly, a web-based robot simulation environment for learning coding and math.")]),t._v(" "),o("li",[t._v("Wonder Workshop, to control their Dot and Dash educational robots.")])]),t._v(" "),o("p",{staticStyle:{"font-size":"20px"}},[o("strong",[t._v("Blockly")]),t._v("被应用在一些优秀的项目中，包括:\n        ")]),t._v(" "),o("ul",{staticStyle:{"font-size":"16px"}},[o("li",[t._v("麻省理工学院的App Inventor，为Android开发应用程序。")]),t._v(" "),o("li",[t._v("Blockly游戏，一组教育游戏，教编程概念，如循环和条件。")]),t._v(" "),o("li",[t._v("Code.org,在数以百万计的学生学习编程时教授编程入门。")]),t._v(" "),o("li",[t._v("RoboBlockly,一个基于web的机器人模拟环境，用于学习编码和数学。")]),t._v(" "),o("li",[t._v("Wonder Workshop,控制他们的Dot和Dash教育机器人。")])])])],2),t._v(" "),o("el-collapse-item",[o("template",{slot:"title"},[o("i",{staticClass:"el-icon-info",staticStyle:{height:"20px"}},[t._v("  ")]),t._v(" "),o("h2",{staticStyle:{color:"#409EFF"}},[t._v("Features")])]),t._v(" "),o("div",[o("ul",{staticStyle:{"font-size":"16px"}},[o("li",[t._v("Web based using Scalable Vector Graphics (SVG), no Flash")]),t._v(" "),o("li",[t._v("Completely client side JavaScript")]),t._v(" "),o("li",[t._v("Support of major web browsers including: Chrome, Firefox, Safari, Opera,Internet Explorer (IE)")]),t._v(" "),o("li",[t._v("Mobile support on Android and iOS")]),t._v(" "),o("li",[t._v("Support for many programmatic constructs including variables, functions, arrays")]),t._v(" "),o("li",[t._v("Minimal type checking supported, designed for weakly typed languages")]),t._v(" "),o("li",[t._v("Easy to extend with custom blocks. Use the Block Factory to make new blocks")]),t._v(" "),o("li",[t._v("Clean code generation")]),t._v(" "),o("li",[t._v("Step-by-step code execution for tracing and debugging code")]),t._v(" "),o("li",[t._v("Localised into 50+ languages")]),t._v(" "),o("li",[t._v("Support for left-to-right and right-to-left languages")])]),t._v(" "),o("ul",{staticStyle:{"font-size":"16px","margin-top":"20px"}},[o("li",[t._v("基于Web使用可伸缩矢量图形(SVG)，没有Flash")]),t._v(" "),o("li",[t._v("完全客户端化的JavaScript")]),t._v(" "),o("li",[t._v("支持主要浏览器，包括:Chrome, Firefox, Safari, Opera, IE")]),t._v(" "),o("li",[t._v("支持Android和iOS手机")]),t._v(" "),o("li",[t._v("支持许多编程构造，包括变量、函数、数组")]),t._v(" "),o("li",[t._v("支持最小类型检查，专为弱类型语言设计")]),t._v(" "),o("li",[t._v("易于扩展自定义块。使用积木工厂制造新的积木")]),t._v(" "),o("li",[t._v("干净的代码生成")]),t._v(" "),o("li",[t._v("逐步执行代码以跟踪和调试代码")]),t._v(" "),o("li",[t._v("本地化了50多种语言")]),t._v(" "),o("li",[t._v("支持从左到右和从右到左的语言")])])])],2)],1)],1)},staticRenderFns:[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticStyle:{"font-size":"17px"}},[n("h1",{staticStyle:{color:"black","text-align":"center"}},[t._v("Development Team")]),t._v(" "),n("p",[n("strong",[t._v("我们是来自中国科学技术大学软件学院的研究生团队，基于Google Blockly的可视化编程技术之上进行了此次项目的开发工作。")])]),t._v(" "),n("p",[n("strong",[t._v("王小雷：")]),n("br"),t._v("\n      1.block块简单排序算法的实现并且转化为xml文档，主要包括插入排序、选择排序、冒泡排序、快速排序。"),n("br"),t._v("\n      2.部分数据结构，例如数组block块组合实现数据结构的基本算法。"),n("br"),t._v("\n      3.数据结构算法的详细说明，主要包括:算法思想，算法稳定性，时间复杂度分析，代码实现。"),n("br"),t._v("\n      4.完成开题答辩文档部分编写和汇总与纠错，开题答辩ppt制作以及结题答辩ppt制作。"),n("br"),t._v("\n      5.参与系统测试调试和联调。\n    ")]),t._v(" "),n("p",[n("strong",[t._v("王智豪：")]),n("br"),t._v("\n      1.对整个项目进行人员与工作的分配，把握项目整体流程规划以及时间安排。"),n("br"),t._v("\n      2.实现每一个算法对应的Echarts工具包，进行可视化展示。"),n("br"),t._v("\n      3.利用Blockly自带工具，编写特定的注入代码进行代码解析实现Blockly工具包。"),n("br"),t._v("\n      4.编写按钮控制工具包，工具类包和控制流程包，构建并实现整个可视化项目的核心库USTC_VP，实现可插拔式的算法展示并不断升级核心库。"),n("br"),t._v("\n      5.帮助Blockly块搭建人员，编写对应算法的JavaScript的程序用于实现块搭建。"),n("br"),t._v("\n      6.使用阿里云在Linux利用Docker搭建Nginx和Apache服务器，用于远程访问。"),n("br"),t._v("\n      7.协助前端人员嵌入Vue和ElementUI，联调项目修改程序漏洞。")]),t._v(" "),n("p",[n("strong",[t._v("宛 壮：")]),n("br"),t._v("\n      1. 使用git构建项目仓库，部署项目管理工作。"),n("br"),t._v("\n      2. 完成前期项目所需的blocks及对应的Blockly的js代码的编写。包含linklist，stack，queue，tree四部分。"),n("br"),t._v("\n      3. 编写测试网页，实现对构建的blocks和对应js的代码正确性验证工作。"),n("br"),t._v("\n      4. 构建了linklist，stack，queue,tree四个部分所有的算法块的构建工作。"),n("br"),t._v("\n      5. 使用 Vue.js 构建前端项目，构建网站主体框架，完成对项目主体功能的移植工作。")]),t._v(" "),n("p",[n("strong",[t._v("王智林：")]),n("br"),t._v("\n      1.利用"),n("strong",[t._v("Vue.js")]),t._v("和"),n("strong",[t._v("Element-UI")]),t._v("实现项目数据的前台展示工作。"),n("br"),t._v("\n      2.协助搭建前端网页整体框架，设计并实现网页主题和布局。"),n("br"),t._v("\n      3.建立前端各个Vue组件，完成组件单元测试工作。"),n("br"),t._v("\n      4.实现Vue组件间的数据通信，将分散的组件构建成整体网页，实现最后的效果展示。"),n("br"),t._v("\n      5.对网页进行美化，协助小组其他成员进行最后的Bug修复和整体调试工作。"),n("br")])])}]};var O=n("VU/8")(I,E,!1,function(t){n("cYIv")},"data-v-2d8329e0",null).exports;n("yT9o"),n("infp"),n("NNpM"),n("Z7AR"),n("FuZX"),n("yhxP"),n("ynMM"),n("ywlS"),n("vsQK"),n("VEfW"),n("Ae3H"),n("ui9z"),n("p/Nd"),n("5+ey"),n("IlB7"),n("gR1Q"),n("watx"),n("JS0P"),n("fd5U");let B=new Map;B.set("arrayInsertAlg",{obj:ArrayInsertExecute,xml:"static/xml/arrays/array_insert_workspace.xml",a_name:"数组插入"}),B.set("arrayDeleteAlg",{obj:ArrayDeleteExecute,xml:"static/xml/arrays/array_delete_workspace.xml",a_name:"数组删除"}),B.set("bubbleSortAlg",{obj:BubbleSortExecute,xml:"static/xml/arrays/bubble_sort_workspace.xml",a_name:"冒泡排序"}),B.set("selectSortAlg",{obj:SelectSortExecute,xml:"static/xml/arrays/select_sort_workspace.xml",a_name:"选择排序"}),B.set("quickSortAlg",{obj:QuickSortExecute,xml:"static/xml/arrays/quick_sort_workspace.xml",a_name:"快速排序"}),B.set("insertSortAlg",{obj:InsertSortExecute,xml:"static/xml/arrays/insert_sort_workspace.xml",a_name:"插入排序"}),B.set("stackPushAlg",{obj:StackPushExecute,xml:"static/xml/stacks/stack_push_workspace.xml",a_name:"入栈"}),B.set("stackPopAlg",{obj:StackPopExecute,xml:"static/xml/stacks/stack_pop_workspace.xml",a_name:"出栈"}),B.set("stackOverAllAlg",{obj:StackOverAllExecute,xml:"static/xml/stacks/stack_overall_workspace.xml",a_name:"栈综合"}),B.set("queueOverAllAlg",{obj:QueueOverAllExecute,xml:"static/xml/queues/queue_overall_workspace.xml",a_name:"队列综合"}),B.set("queuePushAlg",{obj:QueuePushExecute,xml:"static/xml/queues/queue_push_workspace.xml",a_name:"入队"}),B.set("queuePopAlg",{obj:QueuePopExecute,xml:"static/xml/queues/queue_pop_workspace.xml",a_name:"出队"}),B.set("linklistDeleteAlg",{obj:LinkListDeleteExecute,xml:"static/xml/linklists/linklist_delete_workspace.xml",a_name:"链表删除"}),B.set("linklistSearchAlg",{obj:LinkListSearchExecute,xml:"static/xml/linklists/linklist_search_workspace.xml",a_name:"链表查询"}),B.set("linklistInsertAlg",{obj:LinkListInsertExecute,xml:"static/xml/linklists/linklist_insert_workspace.xml",a_name:"链表插入"}),B.set("treeBfsAlg",{obj:TreeBfsExecute,xml:"static/xml/trees/tree_bfs_workspace.xml",a_name:"广度优先"}),B.set("treeInOrderAlg",{obj:TreeInorderExecute,xml:"static/xml/trees/tree_inorder_workspace.xml",a_name:"中序遍历"}),B.set("treePreOrderAlg",{obj:TreePreorderExecute,xml:"static/xml/trees/tree_preorder_workspace.xml",a_name:"前序遍历"}),B.set("treePosOrderAlg",{obj:TreePosorderExecute,xml:"static/xml/trees/tree_posorder_workspace.xml",a_name:"后序遍历"});let L=new Map;L.set("bubbleSortAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>重复的遍历（走过）待排序的一组数字（通常是列表形式），依次比较两个相邻的元素（数字），若它们的顺序错误则将它们调换一下位置，直至没有元素再需要交换为止。因为每遍历一次列表，最大（或最小）的元素会经过交换一点点”浮“到列表的一端（顶端）， 所以形象的称这个算法为冒泡算法。</p><br><strong>具体步骤：</strong><br><ol><li>比较两个相邻元素，如果前一个比后一个大，则交换这两个相邻元素</li><li>从头至尾对每一对相邻元素进行步骤 1 的操作，完成 1 次对整个待排序数字列表的遍历后，最大的元素就放在了该列表的最后一个位置上了</li><li>对除最后一个元素的所有元素重复上述步骤，这第二次遍历后第二大的元素就也放在了正确   的位置（整个列表的倒数第二位置上）</li><p>不断重复上述步骤，每次遍历都会将一个元素放在正确的位置上，从而下次遍历的元素也会   随之减少一个，直至没有任何一对数字需要比较。</p></ol></div>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em;'>在已经有序的情况下不需要交换，最好情况为 O(n)；在无序的情况下要进行两次循环遍历所有元素最坏情况为 O(n^2)；综上平均情况下为 O(n^2)</p><strong>稳定性：</strong><p style='text-indent: 2em'>算法稳定，但是它也可以变成不稳定的算法.。如果两个数相等，即相等的两个数字的相对位置在排序前后不变，则该算法是稳定的,由定义可得在冒泡排序前后，相等元素没有发生位置的改变，所有冒泡排序算法是稳定的。当在代码交换条件中加上等号时为不稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #ff7700;font-weight:bold;">def</span> Bubble_Sort<span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">for</span> i <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #008000;">range</span><span style="color: black;">&#40;</span><span style="color: #008000;">len</span><span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">for</span> j <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #008000;">range</span><span style="color: black;">&#40;</span><span style="color: #008000;">len</span><span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span>-i-<span style="color: #ff4500;">1</span><span style="color: black;">&#41;</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t<span style="color: #ff7700;font-weight:bold;">if</span> L<span style="color: black;">&#91;</span>j<span style="color: black;">&#93;</span> <span style="color: #66cc66;">&gt;</span> L<span style="color: black;">&#91;</span>j+<span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\ttemp <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span>j<span style="color: black;">&#93;</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tL<span style="color: black;">&#91;</span>j<span style="color: black;">&#93;</span> <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span>j+<span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tL<span style="color: black;">&#91;</span>j+<span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span> <span style="color: #66cc66;">=</span> temp</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">return</span> L</div></li></ol></pre>'}),L.set("quickSortAlg",{idea:"<div style='text-align: left; text-indent: 2em;;font-size: 16px'> <p>通过一趟排序将待排序列表分割成独立的两部分，其中一部分的所有元素都比另一部分小，然后再按此方法将独立的两部分分别继续重复进行此操作，这个过程我们可以通过递归实现，从而达到最终将整个列表排序的目的。</p><br><strong>具体步骤：</strong><br><ol><li>从待排序列表（数组）中选择一个元素作为基准（pivot），这里我们选择最后一个元素。</li><li>遍历列表，将所有小于基准的元素放在其前面，这样就可以将待排序列表分成两部分了递归地对每个部分进行 1、2 操作，这里递归结束的条件是序列的大小为 0 或 1，此时递归结束，排序就已经完成了。</li></ol></div>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>快速排序的每一次划分把一个问题分解成两个子问题，其中的关系可以用下式表示： T[n] = 2T[n/2] + O(n)  其中 O(n)为 PARTITION()的时间复杂度，对比主定理，T [n] = aT[n/b] + f (n)由主定理 case2 可知，时间复杂度为 O(nlogn)；当在快速排序过程中随机选择算法选择最右端的极限时候，得到 T[n] = T[n-1] + T[1] + O(n)公式，由计算可得最坏时间复杂度为 O(n^2)。</p><strong>稳定性：</strong><p style='text-indent: 2em'>算法不稳定。快速排序会设置两个指示位置的变量 i,j 对整个序列分别进行从左向右和从右向左的扫描，关键字的比较和交换是跳跃进行的，在这种情况下可知相同大小位置的数字会交换位置，所以快速排序是一种不稳定的排序方法。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #ff7700;font-weight:bold;">def</span> Swap<span style="color: black;">&#40;</span>L<span style="color: #66cc66;">,</span>i<span style="color: #66cc66;">,</span>j<span style="color: black;">&#41;</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\ttemp <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span>i<span style="color: black;">&#93;</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tL<span style="color: black;">&#91;</span>i<span style="color: black;">&#93;</span> <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span>j<span style="color: black;">&#93;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tL<span style="color: black;">&#91;</span>j<span style="color: black;">&#93;</span> <span style="color: #66cc66;">=</span> temp</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #ff7700;font-weight:bold;">def</span> Partition<span style="color: black;">&#40;</span>L<span style="color: #66cc66;">,</span>left<span style="color: #66cc66;">,</span>right<span style="color: black;">&#41;</span>: </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tpivot <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span>right<span style="color: black;">&#93;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\ttail <span style="color: #66cc66;">=</span> left - <span style="color: #ff4500;">1</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #808080; font-style: italic;"># 将所有小于基准的数依次堆到前面</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">for</span> i <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #008000;">range</span><span style="color: black;">&#40;</span>left<span style="color: #66cc66;">,</span>right<span style="color: black;">&#41;</span>: </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> L<span style="color: black;">&#91;</span>i<span style="color: black;">&#93;</span> <span style="color: #66cc66;">&lt;=</span>\tpivot:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\ttail +<span style="color: #66cc66;">=</span> <span style="color: #ff4500;">1</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tSwap<span style="color: black;">&#40;</span>L<span style="color: #66cc66;">,</span>i<span style="color: #66cc66;">,</span>tail<span style="color: black;">&#41;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tSwap<span style="color: black;">&#40;</span>L<span style="color: #66cc66;">,</span>tail+<span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span>right<span style="color: black;">&#41;</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">return</span> tail + <span style="color: #ff4500;">1</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #ff7700;font-weight:bold;">def</span> Quick_Sort<span style="color: black;">&#40;</span>L<span style="color: #66cc66;">,</span>left<span style="color: #66cc66;">,</span>right<span style="color: black;">&#41;</span>: </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> left <span style="color: #66cc66;">&gt;=</span> right:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tpivot <span style="color: #66cc66;">=</span> Partition<span style="color: black;">&#40;</span>L<span style="color: #66cc66;">,</span>left<span style="color: #66cc66;">,</span>right<span style="color: black;">&#41;</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tQuickSort_wujingqiao<span style="color: black;">&#40;</span>L<span style="color: #66cc66;">,</span>left<span style="color: #66cc66;">,</span>pivot-<span style="color: #ff4500;">1</span><span style="color: black;">&#41;</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tQuickSort_wujingqiao<span style="color: black;">&#40;</span>L<span style="color: #66cc66;">,</span>pivot+<span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span>right<span style="color: black;">&#41;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">return</span> L</div></li></ol></pre>'}),L.set("insertSortAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>对于未排序元素，在已排序序列中从后向前扫描，找到相应位置把它插入进去；在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为新元素提供插入空间。</p><br><strong>具体步骤：</strong><br><ol><li>从第一个元素开始，默认该元素已被排好序</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤 2~5</li></ol></div>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>在插入排序中，当待排序数组是有序时，是最优的情况，只需当前数跟前一个数比较一下就可以了，这时一共需要比较 N- 1 次，最好情况为 O(n)；当排序数组是逆序的，此时需要比较次数最多，总次数记为：1+2+3+…+N-1，所以，插入排序最坏情况下的时间复杂度为O(n^2)；平均来说，A[1..j-1]中的一半元素小于 A[j]，一半元素大于 A[j]。插入排序在平均情况运行时间与最坏情况运行时间一样，是输入规模的二次函数，所以时间复杂度为 O(n^2)</p><strong>稳定性：</strong><p style='text-indent: 2em'>算法稳定。插入排序时一个通过不断增加有序序列长度最终使整个序列变得有序的排序算法.所以我们只要设置插入的条件为,a[i]>a[j]那么在两个相同的元素比较时,必然原来在后  面的元素不会被放到原来在前面的元素之前.即它们的相对顺序是不变的。所以是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #ff7700;font-weight:bold;">def</span> Insert_Sort<span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">for</span> i <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #008000;">range</span><span style="color: black;">&#40;</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span><span style="color: #008000;">len</span><span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>: </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\ttemp <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span>i<span style="color: black;">&#93;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tj <span style="color: #66cc66;">=</span>\ti-<span style="color: #ff4500;">1</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">while</span> L<span style="color: black;">&#91;</span>j<span style="color: black;">&#93;</span> <span style="color: #66cc66;">&gt;</span> temp <span style="color: #ff7700;font-weight:bold;">and</span> j <span style="color: #66cc66;">&gt;=</span> <span style="color: #ff4500;">0</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tL<span style="color: black;">&#91;</span>j+<span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span> <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span>j<span style="color: black;">&#93;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tj -<span style="color: #66cc66;">=</span> <span style="color: #ff4500;">1</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tL<span style="color: black;">&#91;</span>j+<span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span> <span style="color: #66cc66;">=</span> temp </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">return</span> L</div></li></ol></pre>'}),L.set("selectSortAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>选择排序也很简单直观（其实这几种排序算法都很简单直观～&nbsp;&nbsp;。～），它的基本思想是： 先在待排序列表中找到最小（大）的元素，把它放在起始位置作为已排序序列；然后，再从剩余待排序序列中找到最小（大）的元素放在已排序序列的末尾，以此类推，直至完毕。</p><br><strong>具体步骤：</strong><br><p>初始状态整个待排序序列为无序序列，有序序列为空每次遍历无序序列将最小元素交换到有序序列之后 n-1 趟遍历后排序完成。</p></div>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>当已经有序的情况下是最好的情况为 O(1)；当在无序的情况下，交换操作介于 0  和 (n\n- 1）次之间，选择排序的比较操作为 n (n - 1） / 2  次之间，由时间复杂度的规则可知为\nO(n^2)；综上平均时间为 O(n^2)\n</p><strong>稳定性：</strong><p style='text-indent: 2em'>算法不稳定。由工作原理可知，算法每一次从待排序的数据元素中选出最小(或最大)的一个元素，存放在序列的起始(末尾)位置，直到全部待排序的数据元素排完，无论前后元素是否相等都和不相等的比较元素进行换位。所以选择排序是不稳定的排序方法。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #ff7700;font-weight:bold;">def</span> Straight_Select_Sort<span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span>: </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">for</span> i <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #008000;">range</span><span style="color: black;">&#40;</span><span style="color: #008000;">len</span><span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #008000;">min</span> <span style="color: #66cc66;">=</span> i</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">for</span> j <span style="color: #ff7700;font-weight:bold;">in</span> <span style="color: #008000;">range</span><span style="color: black;">&#40;</span>i<span style="color: #66cc66;">,</span><span style="color: #008000;">len</span><span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>: </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t<span style="color: #ff7700;font-weight:bold;">if</span> L<span style="color: black;">&#91;</span>j<span style="color: black;">&#93;</span> <span style="color: #66cc66;">&lt;</span> L<span style="color: black;">&#91;</span><span style="color: #008000;">min</span><span style="color: black;">&#93;</span>:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\t<span style="color: #008000;">min</span> <span style="color: #66cc66;">=</span> j <span style="color: #ff7700;font-weight:bold;">if</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t<span style="color: #008000;">min</span> <span style="color: #66cc66;">!=</span> i:</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\ttemp <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span>i<span style="color: black;">&#93;</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tL<span style="color: black;">&#91;</span>i<span style="color: black;">&#93;</span> <span style="color: #66cc66;">=</span> L<span style="color: black;">&#91;</span><span style="color: #008000;">min</span><span style="color: black;">&#93;</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tL<span style="color: black;">&#91;</span><span style="color: #008000;">min</span><span style="color: black;">&#93;</span> <span style="color: #66cc66;">=</span> temp</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>L<span style="color: black;">&#41;</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span>\tL</div></li></ol></pre>'}),L.set("mergeSortAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>递归的将两个已排序的序列合并成一个序列。</p><br><strong>具体步骤：</strong><br><ol><li>申请空间，其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li></ol></div>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>因为归并排序调用有序数组排序函数时间复杂度为 O(n)，调用有序数组排序函数把数组划分为两部分，那每一小部分排序好所花时间则为 T[n/2]，由逻辑可得公式：T[n]\t=\t2T[n/2]\n \n+ O(n)；由主定理可解得平均情况为 T[n] = O( nlogn )。因为不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )。\n</p><strong>稳定性：</strong><p style='text-indent: 2em'>算法稳定。归并排序通过递归把一个由 n 个元素组成的序列分成 n 个长度为 1 的子序列,然后把它们两两合并,合并的过程是始终用两个有序序列的最顶端的值进行比较,对于归  并排序的稳定性的分析主要就是对归并过程的分析了,当我们在归并两个有序序列的时候,当他们最顶端的数字大小相同时,我们只需比较下标就可以了,对于下标小的我们优先取出,这  样就可以保证排序的稳定性了。</p></div>",code:"# 归并排序\ndef Merge(left, right): l, r = 0, 0\nresult = []\nwhile l < len(left) and r < len(right):\t# 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置\nif left[l] < right[r]: result.append(left[l]) l += 1\nelse:\nresult.append(right[r]) r += 1\nresult += left[l:]\t# 若最后 left 列表剩余，则将其剩余部分加入到 result 后面\nresult += right[r:]\t# 若最后 right 列表剩余，则将其剩余部分加入到 result 后面\nreturn result\n\ndef Merge_Sort(L): if len(L) <= 1:\nreturn L mid = len(L) // 2\nleft = Merge_Sort(L[:mid]) right = Merge_Sort(L[mid:]) return Merge(left, right)\n"}),L.set("arrayInsertAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>在一个已知的数组里，随机生成数值value和插入位置index，将插入位置后的数向后移一个位置，最后将value插入到index上。</p><br>",algAnalysis:"<div style='text-align: left;' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>在最好的情况下，index在尾部时，时间复杂度为O(1)；当index在首部时，因为每个数字都要向后移一个单位，遍历整个数组，所以时间复杂度为O(n)。综上平均时间复杂度为O(n)。</p><strong>稳定性：</strong><p style='text-indent: 2em'> 因为算法本身依次后移，当存在相同元素时不改变原来的位置，所以算法是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">ArrayInsert<span style="color: black;">&#40;</span><span style="color: #008000;">int</span> arr<span style="color: black;">&#91;</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> arr<span style="color: black;">&#91;</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">=</span><span style="color: black;">&#123;</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">44</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">38</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">27</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">16</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">23</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">11</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">8</span><span style="color: black;">&#125;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> value<span style="color: #66cc66;">=</span><span style="color: #dc143c;">random</span><span style="color: black;">&#40;</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">50</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span>index<span style="color: #66cc66;">=</span><span style="color: #dc143c;">random</span><span style="color: black;">&#40;</span><span style="color: #ff4500;">0</span><span style="color: #66cc66;">,</span>sizeof<span style="color: black;">&#40;</span>arr<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> i<span style="color: #66cc66;">=</span>sizeof<span style="color: black;">&#40;</span>arr<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #ff7700;font-weight:bold;">while</span><span style="color: black;">&#40;</span>i<span style="color: #66cc66;">&gt;</span>index<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">  <span style="color: #008000;">int</span> temp<span style="color: #66cc66;">=</span>arr<span style="color: black;">&#91;</span>i-<span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">  arr<span style="color: black;">&#91;</span>i<span style="color: black;">&#93;</span><span style="color: #66cc66;">=</span>temp<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">  i<span style="color: #66cc66;">=</span>i-<span style="color: #ff4500;">1</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">arr<span style="color: black;">&#91;</span>index<span style="color: black;">&#93;</span><span style="color: #66cc66;">=</span>value<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li></ol></pre>'}),L.set("arrayDeleteAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>在一个已知的数组里，随机生成删除位置index，将删除位置上的数据删除后，后边数据向前移。</p><br>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>在最好的情况下，index在尾部时，时间复杂度为O(1)；当index在首部时，因为每个数字都要向后移一个单位，遍历整个数组，所以时间复杂度为O(n)。综上平均时间复杂度为O(n)。</p><strong>稳定性：</strong><p style='text-indent: 2em'> 因为算法本身依次后移，当存在相同元素时不改变原来的位置，所以算法是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">ArrayDelete<span style="color: black;">&#40;</span><span style="color: #008000;">int</span> arr<span style="color: black;">&#91;</span><span style="color: black;">&#93;</span><span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> arr<span style="color: black;">&#91;</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">=</span><span style="color: black;">&#123;</span><span style="color: #ff4500;">3</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">44</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">38</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">27</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">16</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">23</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">11</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">8</span><span style="color: black;">&#125;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> tmp<span style="color: #66cc66;">=</span>sizeof<span style="color: black;">&#40;</span>arr<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">If<span style="color: black;">&#40;</span>tmp<span style="color: #66cc66;">&gt;</span><span style="color: #ff4500;">0</span><span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> index<span style="color: #66cc66;">=</span><span style="color: #dc143c;">random</span><span style="color: black;">&#40;</span><span style="color: #ff4500;">0</span><span style="color: #66cc66;">,</span>tmp-<span style="color: #ff4500;">1</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">    <span style="color: #ff7700;font-weight:bold;">if</span><span style="color: black;">&#40;</span>index<span style="color: #66cc66;">&lt;</span>tmp-<span style="color: #ff4500;">1</span><span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">      <span style="color: #ff7700;font-weight:bold;">for</span><span style="color: black;">&#40;</span><span style="color: #008000;">int</span> i<span style="color: #66cc66;">=</span>index<span style="color: #66cc66;">;</span>i<span style="color: #66cc66;">&lt;=</span>tmp-<span style="color: #ff4500;">2</span><span style="color: #66cc66;">;</span>i++<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">        <span style="color: #008000;">int</span> val<span style="color: black;">&#91;</span><span style="color: #ff4500;">0</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">=</span>arr<span style="color: black;">&#91;</span>i+<span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">,</span>val<span style="color: black;">&#91;</span><span style="color: #ff4500;">1</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">=</span>arr<span style="color: black;">&#91;</span>i+<span style="color: #ff4500;">2</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">        Int tmp_val<span style="color: #66cc66;">=</span>val<span style="color: black;">&#91;</span><span style="color: #ff4500;">0</span><span style="color: black;">&#93;</span><span style="color: #66cc66;">;</span>  </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #ff7700;font-weight:bold;">del</span><span style="color: black;">&#40;</span>sizeof<span style="color: black;">&#40;</span>arr<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">Cout<span style="color: #66cc66;">&lt;&lt;</span>arr<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li></ol></pre>'}),L.set("linklistInsertAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>在一个已知的链表里，在数值范围里随机生成要插入的数值和位置，从头部开始循环遍历到要插入的位置，将数值插入到指定位置，将该位置的上一个节点互相指向新节点，该位置的下一个节点互相指向新节点。</p><br>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>在最好的情况下，待插入位置在首部时，时间复杂度为O(1)；当待插入位置在尾部时，遍历整个链表，时间复杂度为O(n)。综上平均时间复杂度为O(n)。</p><strong>稳定性：</strong><p style='text-indent: 2em'> 算法完成遍历功能，因为当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">LinkListInsert<span style="color: black;">&#40;</span>List_point *linklist<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tInt val<span style="color: #66cc66;">=</span><span style="color: #dc143c;">random</span><span style="color: black;">&#40;</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">10</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span>position<span style="color: #66cc66;">=</span><span style="color: #dc143c;">random</span><span style="color: black;">&#40;</span><span style="color: #ff4500;">0</span><span style="color: #66cc66;">,</span>sizeof<span style="color: black;">&#40;</span>linklist<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">,</span>node<span style="color: #66cc66;">=</span>null<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tList_point Curr<span style="color: #66cc66;">=</span>linklist-<span style="color: #66cc66;">&gt;</span>head<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tIf<span style="color: black;">&#40;</span>position<span style="color: #66cc66;">==</span><span style="color: #ff4500;">0</span><span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tNode-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">=</span>curr<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tLinklist-<span style="color: #66cc66;">&gt;</span>head<span style="color: #66cc66;">=</span>node<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tElse<span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tIndex<span style="color: #66cc66;">=</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tWhile<span style="color: black;">&#40;</span>index<span style="color: #66cc66;">&lt;</span>position<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tIndex++<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tCurr<span style="color: #66cc66;">=</span>curr-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tNode-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">=</span>curr-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tCurr-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">=</span>node<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tLen<span style="color: black;">&#40;</span>linklist<span style="color: black;">&#41;</span>++<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tCout<span style="color: #66cc66;">&lt;&lt;</span>linklist<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li></ol></pre>'}),L.set("linklistDeleteAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>在一个已知的链表里，在数值范围里随机生成要删除的数值，从头部开始循环遍历各个节点，直到等于要删除的数值，然后删除该节点，并且前向节点指向后边节点，然后算法停止。</p><br>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>在最好的情况下，随机生成的数据在首部时，时间复杂度为O(1)；当index在尾部时，因为每个节点都要遍历一遍，所以时间复杂度为O(n)。综上平均时间复杂度为O(n)。</p><strong>稳定性：</strong><p style='text-indent: 2em'>因为算法本身只是遍历，遇到匹配数据时，删除节点，完成指向后移，即时当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">LinkListDelete<span style="color: black;">&#40;</span>List_point *linklist<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">Int val<span style="color: #66cc66;">=</span><span style="color: #dc143c;">random</span><span style="color: black;">&#40;</span><span style="color: #ff4500;">1</span><span style="color: #66cc66;">,</span><span style="color: #ff4500;">10</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">List_point curr<span style="color: #66cc66;">=</span>linklist-<span style="color: #66cc66;">&gt;</span>head<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">While<span style="color: black;">&#40;</span>curr<span style="color: #66cc66;">!=</span>null<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">If<span style="color: black;">&#40;</span>curr<span style="color: #66cc66;">==</span>val<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">      If<span style="color: black;">&#40;</span>curr-<span style="color: #66cc66;">&gt;</span>value<span style="color: #66cc66;">==</span>linklist-value<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">        Linklist-<span style="color: #66cc66;">&gt;</span>head<span style="color: #66cc66;">=</span>curr-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">      Else</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">       Previous-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">=</span>curr-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">len</span><span style="color: black;">&#40;</span>linklist<span style="color: black;">&#41;</span>--<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">Previous<span style="color: #66cc66;">=</span>curr<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">Curr<span style="color: #66cc66;">=</span>curr-<span style="color: #66cc66;">&gt;</span>Next<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li></ol></pre>'}),L.set("treeBfsAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>按层遍历。我们知道一个节点有左右节点。而每一层一层的遍历都和左右节点有着很大的关系。也就是我们选用的数据结构不能一股脑的往一个方向钻，而左右应该均衡考虑。这样我们就选用队列来实现。\n（1）对于队列，现进先出。从根节点的节点push到队列，那么队列中先出来的顺序是第二层的左右(假设有)。第二层每个执行的时候添加到队列，那么添加的所有节点都在第二层后面。\n（2）同理，假设开始pop遍历第n层的节点，每个节点会push左右两个节点进去。但是队列先进先出。它会放到队尾(下一层)。直到第n层的最后一个pop出来，第n+1层的还在队列中整齐排着。这就达到一个层序的效果。\n</p><br>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>利用一个辅助栈来进行每个节点的存储打印，所以每个节点都要进栈和出栈，是根据哪种遍历方式改变的是每个节点的进栈顺序，所以时间复杂度为O(n)，同样空间复杂度也为O(n)，n为结点数。</p><strong>稳定性：</strong><p style='text-indent: 2em'>因为算法依次遍历节点，不改变节点的顺序，当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> LevelOrderTraverse<span style="color: black;">&#40;</span>BiTree T<span style="color: black;">&#41;</span>//层序遍历</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>T <span style="color: #66cc66;">==</span> NULL<span style="color: black;">&#41;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #ff4500;">0</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tqueue<span style="color: #66cc66;">&lt;</span>BiTree<span style="color: #66cc66;">&gt;</span> Q<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tQ.<span style="color: black;">push</span><span style="color: black;">&#40;</span>T<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>//把根结点推入</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">while</span> <span style="color: black;">&#40;</span><span style="color: #66cc66;">!</span>Q.<span style="color: black;">empty</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span>//循环结束之后再次判断，直到队列为空</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tcout <span style="color: #66cc66;">&lt;&lt;</span> Q.<span style="color: black;">front</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>-<span style="color: #66cc66;">&gt;</span>data<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>Q.<span style="color: black;">front</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>-<span style="color: #66cc66;">&gt;</span>Ichild<span style="color: #66cc66;">!=</span> NULL<span style="color: black;">&#41;</span>//左节点进队列</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tQ.<span style="color: black;">push</span><span style="color: black;">&#40;</span>Q.<span style="color: black;">front</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>-<span style="color: #66cc66;">&gt;</span>Ichild<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>Q.<span style="color: black;">front</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>-<span style="color: #66cc66;">&gt;</span>rchild <span style="color: #66cc66;">!=</span> NULL<span style="color: black;">&#41;</span>//右节点进队列</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tQ.<span style="color: black;">push</span><span style="color: black;">&#40;</span>Q.<span style="color: black;">front</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>-<span style="color: #66cc66;">&gt;</span>rchild<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tQ.<span style="color: black;">pop</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>//队头出列</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tcout <span style="color: #66cc66;">&lt;&lt;</span> endl<span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #ff4500;">1</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li></ol></pre>'}),L.set("treePreOrderAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>前序的规则就是根结点 ---\x3e 左子树 ---\x3e 右子树.在每个节点操作的操作中都遵循以上规则。对于前序，就是先访问(输出)该节点。在访问左孩子，其次访问右孩子，如果没有节点则跳过。直到没有节点为止，停止遍历。</p><br>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>在递归情况下，由公式 T(N) = a*T(N / b) + O (N^d)可得，代入公式得到：T(N)=2T(N/2)+O(1):，其中 a = 2, b = 2, d = 0;得到 log(2,2) = 1 > 0，代入公式 O(N ^ log(b,a)) = O(N^ log(2,2)) = O(N)</p><strong>稳定性：</strong><p style='text-indent: 2em'> 因为算法依次遍历节点，不改变节点的顺序，当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> PreOrderTraverse<span style="color: black;">&#40;</span>BiTree T<span style="color: black;">&#41;</span>//前序遍历</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>T<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span> //判T是否为空树</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tcout <span style="color: #66cc66;">&lt;&lt;</span> T-<span style="color: #66cc66;">&gt;</span>data<span style="color: #66cc66;">;</span> //输出T节点的数据</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>PreOrderTraverse<span style="color: black;">&#40;</span>T-<span style="color: #66cc66;">&gt;</span>Ichild<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span> //递归遍历左子树</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>PreOrderTraverse<span style="color: black;">&#40;</span>T-<span style="color: #66cc66;">&gt;</span>rchild<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span> //递归遍历右子树</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #ff4500;">0</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">else</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #ff4500;">1</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">实现二：非递归前序，利用递归的思路，需要先放右节点进栈，再放左节点进栈，这个下次再取节点取到左节点，这个节点再右节点进栈，左节点进栈。然后循环一直到最后会一直优先取到左节点</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">public void qianxu3<span style="color: black;">&#40;</span>node t<span style="color: black;">&#41;</span>// 非递归前序 栈 先左后右  t一般为root</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tStack<span style="color: #66cc66;">&lt;</span>node<span style="color: #66cc66;">&gt;</span> q1 <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">new</span> Stack<span style="color: #66cc66;">&lt;</span>node<span style="color: #66cc66;">&gt;</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t <span style="color: #66cc66;">==</span> null<span style="color: black;">&#41;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t <span style="color: #66cc66;">!=</span> null<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tq1.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">while</span> <span style="color: black;">&#40;</span><span style="color: #66cc66;">!</span>q1.<span style="color: black;">empty</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tnode t1 <span style="color: #66cc66;">=</span> q1.<span style="color: black;">pop</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t1.<span style="color: black;">right</span> <span style="color: #66cc66;">!=</span> null<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tq1.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t1.<span style="color: black;">right</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t1.<span style="color: black;">left</span> <span style="color: #66cc66;">!=</span> null<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tq1.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t1.<span style="color: black;">left</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tSystem.<span style="color: black;">out</span>.<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>t1.<span style="color: black;">value</span> + <span style="color: #483d8b;">&quot; &quot;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">实现三：非递归实现，与中序遍历的方法类似，只不过需要修改输出时间，在进栈时候输入访问节点即可。</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">public void qianxu2<span style="color: black;">&#40;</span>node t<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tStack<span style="color: #66cc66;">&lt;</span>node<span style="color: #66cc66;">&gt;</span> q1 <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">new</span> Stack<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>\t</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">while</span><span style="color: black;">&#40;</span><span style="color: #66cc66;">!</span>q1.<span style="color: black;">isEmpty</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>||t<span style="color: #66cc66;">!=</span>null<span style="color: black;">&#41;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t<span style="color: #66cc66;">!=</span>null<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tSystem.<span style="color: black;">out</span>.<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>t.<span style="color: black;">value</span>+<span style="color: #483d8b;">&quot; &quot;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tq1.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>\t\t\t\t</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tt<span style="color: #66cc66;">=</span>t.<span style="color: black;">left</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t<span style="color: #ff7700;font-weight:bold;">else</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tt<span style="color: #66cc66;">=</span>q1.<span style="color: black;">pop</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t\tt<span style="color: #66cc66;">=</span>t.<span style="color: black;">right</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li></ol></pre>'}),L.set("treeInOrderAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>中序的规则就是左子树 ---\x3e 根结点 ---\x3e 右子树.在每个节点操作的操作中都遵循以上规则。对于中序，就是先访问(输出)左孩子。在访问该节点，其次访问右孩子，如果没有节点则跳过。直到没有节点为止，停止遍历。</p><br>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>在递归情况下，由公式 T(N) = a*T(N / b) + O (N^d)可得，代入公式得到：T(N)=2T(N/2)+O(1):，其中 a = 2, b = 2, d = 0;得到 log(2,2) = 1 > 0，代入公式 O(N ^ log(b,a)) = O(N^ log(2,2)) = O(N)</p><strong>稳定性：</strong><p style='text-indent: 2em'>因为算法依次遍历节点，不改变节点的顺序，当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">实现一：递归实现</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> InOrderTraverse<span style="color: black;">&#40;</span>BiTree T<span style="color: black;">&#41;</span>//中序遍历</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>T<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span>//判T是否为空树，递归边界</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>InOrderTraverse<span style="color: black;">&#40;</span>T-<span style="color: #66cc66;">&gt;</span>Ichild<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>//递归遍历左子树</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tcout <span style="color: #66cc66;">&lt;&lt;</span> T-<span style="color: #66cc66;">&gt;</span>data<span style="color: #66cc66;">;</span>//输出T节点的数据</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>InOrderTraverse<span style="color: black;">&#40;</span>T-<span style="color: #66cc66;">&gt;</span>rchild<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>//递归遍历右子树</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #ff4500;">0</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">else</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #ff4500;">1</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">实现二：非递归实现用栈储存实现。</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">它的规则大致为：栈依次存入左节点所有点，直到最左侧在栈顶。开始抛出栈顶并访问。<span style="color: black;">&#40;</span>例如第一个抛出<span style="color: #ff4500;">2</span><span style="color: black;">&#41;</span>。如果有右节点。那么将右节点加入栈中，然后右节点一致左下遍历直到尾部。（这里<span style="color: #ff4500;">5</span>和<span style="color: #ff4500;">7</span>没有左节点，所以不加）但是如果抛出<span style="color: #ff4500;">15</span>。右节点加入<span style="color: #ff4500;">23</span>.再找<span style="color: #ff4500;">23</span>的左侧节点加入栈顶。就这样循环下去直到栈为空。</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">public void zhongxu2<span style="color: black;">&#40;</span>node t<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tStack<span style="color: #66cc66;">&lt;</span>node<span style="color: #66cc66;">&gt;</span> q1 <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">new</span> Stack<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>\t</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">while</span><span style="color: black;">&#40;</span><span style="color: #66cc66;">!</span>q1.<span style="color: black;">isEmpty</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span>||t<span style="color: #66cc66;">!=</span>null<span style="color: black;">&#41;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t<span style="color: #66cc66;">!=</span>null<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tq1.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tt<span style="color: #66cc66;">=</span>t.<span style="color: black;">left</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">else</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tt<span style="color: #66cc66;">=</span>q1.<span style="color: black;">pop</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tSystem.<span style="color: black;">out</span>.<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>t.<span style="color: black;">value</span>+<span style="color: #483d8b;">&quot; &quot;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tt<span style="color: #66cc66;">=</span>t.<span style="color: black;">right</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li></ol></pre>'}),L.set("treePosOrderAlg",{idea:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>中序的规则就是左子树 ---\x3e 根结点 ---\x3e 右子树.在每个节点操作的操作中都遵循以上规则。对于中序，就是先访问(输出)左孩子。在访问该节点，其次访问右孩子，如果没有节点则跳过。直到没有节点为止，停止遍历。</p><br>",algAnalysis:"<div style='text-align: left;font-size: 16px' ><strong>时间复杂度：</strong><p style='text-indent: 2em'>在递归情况下，由公式 T(N) = a*T(N / b) + O (N^d)可得，代入公式得到：T(N)=2T(N/2)+O(1):，其中 a = 2, b = 2, d = 0;得到 log(2,2) = 1 > 0，代入公式 O(N ^ log(b,a)) = O(N^ log(2,2)) = O(N)</p><strong>稳定性：</strong><p style='text-indent: 2em'> 因为算法依次遍历节点，不改变节点的顺序，当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p></div>",code:'<pre class="python" style="font-family:monospace;"><ol><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">实现一：递归实现</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: #008000;">int</span> PostOrderTraverse<span style="color: black;">&#40;</span>BiTree T<span style="color: black;">&#41;</span>//后序遍历</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>T<span style="color: black;">&#41;</span><span style="color: black;">&#123;</span>//判T是否为空树</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span><span style="color: black;">&#40;</span>PostOrderTraverse<span style="color: black;">&#40;</span>T-<span style="color: #66cc66;">&gt;</span>Ichild<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>//递归遍历左子树</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>PostOrderTraverse<span style="color: black;">&#40;</span>T-<span style="color: #66cc66;">&gt;</span>rchild<span style="color: black;">&#41;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span>//递归遍历右子树</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tcout <span style="color: #66cc66;">&lt;&lt;</span> T-<span style="color: #66cc66;">&gt;</span>data<span style="color: #66cc66;">;</span>//输出T节点的数据</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #ff4500;">0</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">else</span> </div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span> <span style="color: #ff4500;">1</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">&nbsp;</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">实现二：非递归实现，利用栈的压栈出栈，但是要借助额外的标记次数，一个节点访问第二次才能输出。<span style="color: black;">&#40;</span>这个访问第一次是入栈，第二次是子树解决完毕自己即将出栈（先不出栈）<span style="color: black;">&#41;</span>。</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">A、入栈，第一次访问</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">B、即将出栈。第二次访问，</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">C、如果有右孩子，先不出栈把右孩子压入栈第一次访问，如果没右孩子。访问从栈中弹出。</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">D、循环重复，直到栈为空</div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">public void houxu3<span style="color: black;">&#40;</span>node t<span style="color: black;">&#41;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tStack<span style="color: #66cc66;">&lt;</span>node<span style="color: #66cc66;">&gt;</span> q1 <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">new</span> Stack<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\tStack<span style="color: #66cc66;">&lt;</span>node<span style="color: #66cc66;">&gt;</span> q2 <span style="color: #66cc66;">=</span> <span style="color: #dc143c;">new</span> Stack<span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t <span style="color: #66cc66;">==</span> null<span style="color: black;">&#41;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">return</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t <span style="color: #66cc66;">!=</span> null<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tq1.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">while</span> <span style="color: black;">&#40;</span><span style="color: #66cc66;">!</span>q1.<span style="color: black;">isEmpty</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tnode t1 <span style="color: #66cc66;">=</span> q1.<span style="color: black;">pop</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tq2.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t1<span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t1.<span style="color: black;">left</span> <span style="color: #66cc66;">!=</span> null<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tq1.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t1.<span style="color: black;">left</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: #ff7700;font-weight:bold;">if</span> <span style="color: black;">&#40;</span>t1.<span style="color: black;">right</span> <span style="color: #66cc66;">!=</span> null<span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t\tq1.<span style="color: black;">push</span><span style="color: black;">&#40;</span>t1.<span style="color: black;">right</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: #ff7700;font-weight:bold;">while</span> <span style="color: black;">&#40;</span><span style="color: #66cc66;">!</span>q2.<span style="color: black;">isEmpty</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: black;">&#41;</span> <span style="color: black;">&#123;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tnode t1 <span style="color: #66cc66;">=</span> q2.<span style="color: black;">pop</span><span style="color: black;">&#40;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t\tSystem.<span style="color: black;">out</span>.<span style="color: #ff7700;font-weight:bold;">print</span><span style="color: black;">&#40;</span>t1.<span style="color: black;">value</span> + <span style="color: #483d8b;">&quot; &quot;</span><span style="color: black;">&#41;</span><span style="color: #66cc66;">;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;">\t<span style="color: black;">&#125;</span></div></li><li style="font-weight: normal; vertical-align:top;"><div style="font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;"><span style="color: black;">&#125;</span></div></li></ol></pre>'});var j={name:"Collapse",props:{algname:String},data(){return{activeName:"1",Algname:L.get(this.algname)}},methods:{},created(){}},D={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("el-collapse",{attrs:{accordion:""},model:{value:t.activeName,callback:function(e){t.activeName=e},expression:"activeName"}},[n("el-collapse-item",{attrs:{name:"1"}},[n("template",{slot:"title"},[n("h2",[t._v("算法简介")])]),t._v(" "),n("div",{domProps:{innerHTML:t._s(t.Algname.idea)}})],2),t._v(" "),n("el-collapse-item",{attrs:{name:"2"}},[n("template",{slot:"title"},[n("h2",[t._v("算法分析")])]),t._v(" "),n("div",{domProps:{innerHTML:t._s(t.Algname.algAnalysis)}})],2),t._v(" "),n("el-collapse-item",{attrs:{name:"3"}},[n("template",{slot:"title"},[n("h2",[t._v("伪代码实现")])]),t._v(" "),n("pre",{staticStyle:{"margin-top":"0"}},[t._v("\n          "),n("code",{staticClass:"code",domProps:{innerHTML:t._s(t.Algname.code)}}),t._v(">\n        ")])],2)],1)],1)},staticRenderFns:[]};var z=n("VU/8")(j,D,!1,function(t){n("74kJ")},"data-v-2c06a38e",null).exports;let N=new Map;N.set("arrayDeleteAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>小明和小红玩纸牌游戏，小明手中有8张牌，分别为[3,44,38,27,16,23,11,8],小红随机抽取小明手中的一张牌，小明手中按照原顺序还剩下那些牌？请你用程序模拟这一过程。</p></div>"}),N.set("arrayInsertAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p> 小明去图书馆还书，已知书架上的书编号及相对位置为[3,44,38,27,16,23,11,8],小明需要将编号为x=11的书放到书架左边的第3个位置，你请用程序模拟该过程。</p></div>"}),N.set("bubbleSortAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>小明想用冒泡排序对下面的序列进行排序，你能帮他完成吗？</p></div>"}),N.set("selectSortAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>小明最近学习了选择排序算法，但是忘记了具体实现过程，你能帮他完成选择排序算法的编写吗？</p></div>"}),N.set("quickSortAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>小明学习排序算法后，想写出一个最好情况下时间复杂度为O(nlgn),最坏情况下时间复杂度为O(n^2)的排序算法对以下序列排序，你能帮他完成吗？</p></div>"}),N.set("insertSortAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>小明想用插入排序对下面的序列进行排序，你能帮他完成吗？</p></div>"}),N.set("stackPopAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>小风上小学了，写数学题时总是括号比配出错，有一次他的作业中有个式子为((a+b)*(1+2)+1*a)),你能帮他检验作业中括号配置是否正确吗？</p></div>"}),N.set("stackPushAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>小风上小学三年级了，小括号比配已经运用熟练，不会出错，但是学了中括号和大括号后又犯迷糊了，有一次他的作业中有个式子为{[(a+b)+3]+(a+c]},你能帮他检验作业中括号配置是否正确吗？</p></div>"}),N.set("stackOverAllAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>小风对数学四则运算不太熟练，作业中有一道题3+5*6/2-1=?,你能用栈帮他计算出答案吗？</p></div>"}),N.set("queuePopAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>一个管道中恰好可以放入一个小球（管道直径恰好等于小球直径），刚开始管道中有4个白球4个红球，红球用0表示，白球用1表示，初始管道中球的分布为【0，1，1，0，0，0，1，1】，每隔1min在管道左端拿出一个球，经过一个随机x(1<=x<=8且为整数）min ，管道中有多少白球？</p></div>"}),N.set("queuePushAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>一个管道中恰好可以放入一个小球（管道直径恰好等于小球直径），刚开始管道为空，每隔1min在管道一端随机放入一个红球（用0表示）或者白球（用1表示），经过5min后，管道中有多少白球？</p></div>"}),N.set("queueOverAllAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>一个管道中恰好可以放入一个小球（管道直径恰好等于小球直径），刚开始管道为空，每隔1min在管道一端随机放入一个红球（用0表示）或者白球（用1表示），每隔2min在管道另一端拿出一个球，经过10min后，管道中有多少白球？</p></div>"}),N.set("linklistSearchAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>一辆火车有n节车厢，不同车厢中装有价值不同的货物，从第1节车厢开始的各节车厢货物价值分别是[3,4,1,2,7,9]，小明从第一节车厢开始查找货物价值为x=4的车厢，至少需要查找多少节车厢</p></div>"}),N.set("linklistInsertAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>科学家为了研究RNA病毒，现需要向一段RNA序列‘A->G—>C->U->A’中的第二个碱基后插入A（腺嘌呤）,请你用代码模拟该过程。(其中A、C、G、U分别用0，1，2，3表示)</p></div>"}),N.set("linklistDeleteAlg",{title:"<div style='text-align: left; text-indent: 2em;font-size: 16px'> <p>一辆火车有n节车厢，不同车厢中有不同的货物，从第1节车厢开始的各节车厢货物价值分别是[3,4,1,2,7,9]，货物价值为x=4的车厢所装货物为化学物质，为了安全考虑，现决定卸下这节车厢，请你用代码模拟该过程</p></div>"});var P={name:"Title",props:{algname:String},data(){return{Algname:N.get(this.algname)}},methods:{}},M={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("h2",[this._v("题目")]),this._v(" "),e("div",{domProps:{innerHTML:this._s(this.Algname.title)}})])},staticRenderFns:[]};var F={name:"AlgDetail",watch:{$route:function(t,e){if(t!==e){let t=this.$route.params.name;this.route_name=B.get(t).a_name}},isActive:function(t){t&&console.log(this.isActive)}},components:{Title:n("VU/8")(P,M,!1,function(t){n("Quv0")},"data-v-582eaf46",null).exports,Collapse:z},props:{msg:String},data:function(){return{route_name:"",isActive:0,workspace:null,code:""}},created:function(){},mounted:function(){this.init()},methods:{disable(t){t.target.disabled="disabled"},init(){let t=this.$route.params.name;this.initWorkspace(t),this.route_name=B.get(t).a_name},initWorkspace(t){let e=document.getElementById("blocklyDiv"),n=document.getElementById("runButton"),o=document.getElementById("stopButton"),l=document.getElementById("continueButton"),a=document.getElementById("overButton"),r=document.getElementById("output"),i=document.getElementById("showCodeArea"),s=document.getElementById("showBar"),c="",p=B.get(t);p.obj.setExtend(),c=p.xml,console.log(p),ustc_vp.Execute.setBlockly(e,"static/media",c),ustc_vp.Execute.setOutputArea(r),ustc_vp.Execute.setButton(n,o,l,a),ustc_vp.Execute.setShowCodeArea(i),ustc_vp.Execute.setShowChart(s)},showCode(){this.code=Blockly.JavaScript.workspaceToCode(this.workspace)}}},W={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("Title",{attrs:{algname:this.$route.params.name}}),t._v(" "),n("br"),t._v(" "),n("div",{attrs:{id:"visual-visual_programming"}},[n("el-row",{attrs:{gutter:24}},[n("h3",{staticClass:"h3-style"},[t._v("算法动态展示部分")]),t._v(" "),n("el-col",{staticClass:"col-style",attrs:{span:24}},[n("div",{attrs:{id:"buttonBar"}},[n("button",{staticClass:"btn",class:{select:1===t.isActive},staticStyle:{"margin-left":"0"},attrs:{id:"runButton"},on:{click:function(e){t.isActive=1}}},[t._v("运行代码\n            ")]),t._v(" "),n("button",{staticClass:"btn",class:{select:2===t.isActive},attrs:{id:"stopButton"},on:{click:function(e){t.isActive=2}}},[t._v("暂停运行")]),t._v(" "),n("button",{staticClass:"btn",class:{select:3===t.isActive},attrs:{id:"continueButton"},on:{click:function(e){t.isActive=3}}},[t._v("继续运行")]),t._v(" "),n("button",{staticClass:"btn",attrs:{id:"overButton"},on:{click:function(e){t.isActive=0}}},[t._v("结束")])]),t._v(" "),n("div",{staticStyle:{height:"600px"},attrs:{id:"showBar"}},[t._v("\n            动态展示块\n          ")])])],1),t._v(" "),n("el-row",{attrs:{gutter:24}},[n("el-col",{staticClass:"col-style",attrs:{span:24}},[n("h3",{staticClass:"h3-style"},[t._v("BlocklyWorkspace")]),t._v(" "),n("div",{staticStyle:{height:"500px"},attrs:{id:"blocklyDiv"}})])],1),t._v(" "),n("el-row",{attrs:{gutter:24}},[n("el-col",{staticClass:"col-style",attrs:{span:12}},[n("h2",[t._v("代码内容")]),t._v(" "),n("button",{on:{click:function(e){return t.showCode()}}},[t._v("Show JavaScript")]),t._v(" "),n("textarea",{directives:[{name:"model",rawName:"v-model",value:t.code,expression:"code"}],staticStyle:{display:"inline-block",height:"400px",width:"595px","margin-top":"10px"},attrs:{id:"showCodeArea",disabled:"disabled"},domProps:{value:t.code},on:{input:function(e){e.target.composing||(t.code=e.target.value)}}})]),t._v(" "),n("el-col",{staticClass:"col-style",attrs:{span:12}},[n("h2",[t._v("输出")]),t._v(" "),n("br"),t._v(" "),n("textarea",{staticStyle:{display:"inline-block",height:"400px",width:"595px","margin-top":"10px"},attrs:{id:"output",disabled:"disabled"}})])],1)],1),t._v(" "),n("Collapse",{attrs:{algname:this.$route.params.name}})],1)},staticRenderFns:[]};var q=n("VU/8")(F,W,!1,function(t){n("3saa")},"data-v-d5366c02",null).exports;Vue.use(VueRouter);var U=new VueRouter({routes:[{path:"/",redirect:"/algs"},{path:"/home",name:"home",component:y},{path:"/algs",name:"algs",component:S},{path:"/about",name:"about",component:O},{path:"/algs/:name",name:"alg",component:q}],scrollBehavior:(t,e,n)=>({x:0,y:0})});Vue.config.productionTip=!1,Vue.config.devtools=!0,new Vue({el:"#app",router:U,components:{App:c},template:"<App/>"})},NLJF:function(t,e,n){t.exports=n.p+"static/img/c19.5fc70bb.gif"},NMnU:function(t,e,n){t.exports=n.p+"static/img/c17.7a28a06.gif"},NNpM:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},PTIU:function(t,e,n){t.exports=n.p+"static/img/c13.4eb9a34.gif"},Quv0:function(t,e){},R473:function(t,e,n){t.exports=n.p+"static/img/c3.9ba7444.gif"},T8Fs:function(t,e,n){t.exports=n.p+"static/img/c8.c46c4fa.gif"},Tl52:function(t,e){},VEfW:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}();var n={initData:[],arrNow:[],showChart:null,dataChangeIndex:null,treebfsObjectArr:[],treebfsObjectLinks:[],changeChart:null,treebfsDataChangeIndex:[-1]};n.posIdMap=new Map,n.dataClear=function(){n.initData=[],n.arrNow=[],n.showChart=null,n.dataChangeIndex=null,n.treebfsObjectArr=[],n.treebfsObjectLinks=[],n.changeChart=null,n.treebfsDataChangeIndex=[-1],n.posIdMap=new Map},n.initTreeBfsDataChart=function(t,e){console.log("initTreeBfsChart");var n=echarts.init(t),o={title:{text:e.chartTitle},tooltip:{formatter:function(t){return t.data.name}},animationDurationUpdate:300,animationEasingUpdate:"quinticInOut",series:[{type:e.chartType,layout:"none",symbolSize:[e.nodeWidth,e.nodeHeight],legendHoverLink:!0,hoverAnimation:!0,roam:!1,width:e.seriesWidth,edgeSymbol:["circle","arrow"],edgeSymbolSize:[4,10],edgeLabel:{fontSize:20},label:{show:!0,position:"inside",textStyle:{color:"#130c0e",fontStyle:"normal",fontWeight:"bold",fontFamily:"sans-serif",fontSize:15}},itemStyle:{color:e.itemColor[0]},data:e.chartData,links:e.chartLinks,lineStyle:{color:"#409EFF",opacity:1,width:3,curveness:0}}]};return n.setOption(o),n},n.initTreeBfsChart=function(t){return l.setGraphData(n.arrNow,o.latestCode,n.treebfsObjectArr,n.treebfsObjectLinks),n.initTreeBfsDataChart(t,l.setGraphAttr(l.treebfsAttr))},n.setTreeBfsChartOption=function(t,e,n,o){t.setOption({title:{text:o.chartTitle,subtext:"",subtextStyle:{color:"blue",fontWeight:"bold",fontSize:20}},series:[{type:o.chartType,layout:"none",symbolSize:[o.nodeWidth,o.nodeHeight],legendHoverLink:!0,hoverAnimation:!0,roam:!1,width:o.seriesWidth,edgeSymbol:["circle","arrow"],edgeSymbolSize:[4,10],edgeLabel:{fontSize:20},label:{show:!0,position:"inside",textStyle:{color:"#130c0e",fontStyle:"normal",fontWeight:"bold",fontFamily:"sans-serif",fontSize:15}},itemStyle:{color:-1!=n[0]?function(t){for(var l=[],a=0;a<e.length;a++)a==n[0]?l.push(o.itemColor[1]):l.push(o.itemColor[0]);return l[t.dataIndex]}:o.itemColor[0]},data:e,links:o.chartLinks,lineStyle:{opacity:1,width:3,curveness:0}}]})},n.treebfsChangeChart=function(t,e,o,a){if(!t){for(let t=0;t<a.length;t++)a[t]=-1;n.treebfsObjectArr.splice(0,n.treebfsObjectArr.length),n.treebfsObjectLinks.splice(0,n.treebfsObjectLinks.length),ustc_vp.utils.sourceToDest(n.initData,o)}l.arrToTreeBfsChartDataObjArr(o,n.treebfsObjectArr),n.treebfsObjectLinks.splice(0,n.treebfsObjectLinks.length);let r=n.treebfsObjectArr.length;for(let t=1;t<r;t++){let e=n.treebfsObjectArr[t].pos>>1;if(void 0==n.posIdMap.get(e))throw Error("当前节点没有父节点");n.treebfsObjectLinks.push({source:n.posIdMap.get(e),target:n.treebfsObjectArr[t].id,label:{normal:{show:!0,formatter:n.treebfsObjectArr[t].direction}}})}n.setTreeBfsChartOption(e,n.treebfsObjectArr,a,l.setGraphAttr(l.treebfsAttr))};var o={workspace:null,outputArea:null,showCodeArea:null,hasMoreCode:!0,highlightPause:!1,codeInterpreter:null,latestCode:"",addCode:"",customizeApi:{},algAddCode:null,dataClear:function(){o.workspace=null,o.outputArea=null,o.showCodeArea=null,o.hasMoreCode=!0,o.highlightPause=!1,o.codeInterpreter=null,o.latestCode="",o.addCode="",o.customizeApi={},o.algAddCode=null},getWorkspaceXML:function(t){var e=null;try{if(window.ActiveXObject)(e=new ActiveXObject("Msxml2.DOMDocument")).async=!1,e.load(t);else{if(!document.implementation||!document.implementation.createDocument)throw Error("浏览器无内建的XML解析器！");var n=new window.XMLHttpRequest;n.open("GET",t,!1),n.send(null),e=n.responseXML.documentElement}}catch(t){throw Error("XML文件读取失败！"+t)}if(null==e)throw Error("XML文件读取失败！");return console.log("获取xml对象成功！"),e},initBlockly:function(t,e){console.log("initBlockly");var n={collapse:!0,comments:!1,disable:!0,maxBlocks:1/0,trashcan:!1,horizontalLayout:!1,toolboxPosition:"start",css:!0,media:e,rtl:!1,scrollbars:!0,sounds:!0,oneBasedIndex:!0};return Blockly.inject(t,n)},injectCustomizeApi:function(){o.algAddCode(),o.generateAddCodeToString(o.customizeApi)},updateShowCode:function(t,e){e.value=Blockly.JavaScript.workspaceToCode(t)},resetStepUi:function(t){o.workspace.highlightBlock(null),o.highlightPause=!1,t&&(o.outputArea.value="Program output:\n=================")},highlightBlock:function(t){o.workspace.highlightBlock(t),o.highlightPause=!0},initInterpretApi:function(t,e){t.setProperty(e,"alert",t.createNativeFunction(function(t){t=arguments.length?t:"",o.outputArea.value+="\n"+t}));t.setProperty(e,"highlightBlock",t.createNativeFunction(function(e){return e=String(e||""),t.createPrimitive(o.highlightBlock(e))}));for(let n in o.customizeApi)t.setProperty(e,n.toString(),t.createNativeFunction(o.customizeApi[n][1]))},addApi:function(t,e,n,o){t[e.toString()]=[n,o]},generateAddCodeToString:function(t){for(let e in t)o.addCode+=t[e][0]},generateCodeAndLoadIntoInterpreter:function(t,e){Blockly.JavaScript.STATEMENT_PREFIX="highlightBlock(%1);\n"+t,Blockly.JavaScript.addReservedWords("highlightBlock"),o.latestCode=Blockly.JavaScript.workspaceToCode(e),o.resetStepUi(!0)},getCurrInTreePosition:function(t,e){t==e?n.dataChangeIndex[0]=1:o.dfsInTree(t,e,1)},dfsInTree:function(t,e,l){return t==e?(n.dataChangeIndex[0]=l,!0):null!=t&&(o.dfsInTree(t.a.left,e,2*l)||o.dfsInTree(t.a.right,e,2*l+1))},getCurrWrapper:function(t,e){return void 0!=t&&void 0!=e&&(o.getCurrInTreePosition(t,e),n.dataChangeIndex[0]=n.posIdMap.get(n.dataChangeIndex[0]),!0)},gettreebfsArgsWrapper:function(t,e){o.getCurrWrapper(t,e)&&n.changeChart(o.hasMoreCode,n.showChart,n.arrNow,n.dataChangeIndex)},printStrWrapper:function(t){console.log(t)},treebfsAlgAddCode:function(){o.addApi(o.customizeApi,"gettreebfsArgs","gettreebfsArgs(root, curr);\n",o.gettreebfsArgsWrapper)}},l={treebfsAttr:{title:"树层序遍历算法",type:"graph",nodeWidth:50,nodeHeight:50,color:["#d71345","#ffe600"]},TreeNode:function(t,e,n){this.value=t,void 0==this.left?this.left=null:this.left=e,void 0==this.right?this.right=null:this.right=n},deserialize:function(t){if(0==t.length)return null;let e=new l.TreeNode(t[0]);t.shift();let n=[e];for(;n.length>0;){let e=n.shift(),o=t.shift();null!=o&&(e.left=new l.TreeNode(o),n.push(e.left));let a=t.shift();null!=a&&(e.right=new l.TreeNode(a),n.push(e.right))}return e},getTreeNodePosition:function(t){let e=[];if(null==t)return e;let n=[t],o=0;e.push({id:o++,name:"root\n"+t.value,pos:1,direction:null});let l=[1];for(;n.length>0;){let t=l.shift(),a=n.shift(),r=a.left;null!=r&&(l.push(2*t),e.push({id:o++,name:""+r.value,pos:2*t,direction:"left"}),n.push(r));let i=a.right;null!=i&&(l.push(2*t+1),e.push({id:o++,name:""+i.value,pos:2*t+1,direction:"right"}),n.push(i))}return e},setTreeNodeCoordinate:function(t){let e=ustc_vp.utils.getTopY(t[t.length-1].pos),n=ustc_vp.utils.getTreeCoordinate(e);for(let e in t){let o=t[e].pos;t[e].x=n[o-1].x,t[e].y=n[o-1].y}return t},getArrInitData:function(t){if(null==t||void 0==t||""==t)throw Error("getArrInitData()：获取初始化图表数据失败，Blockly未完全加载！！！");{let e=t.split(";"),o=-1;for(let t in e)if(-1!=(o=e[t].indexOf("deserialize(["))){o=t;break}if(-1==o)throw Error("getArrInitData()：没有数据！！！");let l=e[o];console.log("获取初始数据："+l);let a=l.split("[")[1].split("]")[0].split(",");for(let t in a)" null"!=a[t]?n.initData.push(parseInt(a[t])):n.initData.push(null);ustc_vp.utils.sourceToDest(n.initData,n.arrNow)}},arrToTreeBfsChartDataObjArr:function(t,e){if(0==e.length){let n=[];ustc_vp.utils.sourceToDest(t,n);let o=l.deserialize(n);ustc_vp.utils.sourceToDest(l.setTreeNodeCoordinate(l.getTreeNodePosition(o)),e)}},setGraphData:function(t,e,o,a){l.getArrInitData(e),l.arrToTreeBfsChartDataObjArr(t,o);let r=o.length;for(let t=0;t<r;t++)n.posIdMap.set(o[t].pos,o[t].id);for(let t=1;t<r;t++){let e=o[t].pos>>1;if(void 0==n.posIdMap.get(e))throw Error("当前节点没有父节点");a.push({source:n.posIdMap.get(e),target:o[t].id,label:{normal:{show:!0,formatter:o[t].direction}}})}},setGraphAttr:function(t){return{chartTitle:t.title,chartType:t.type,chartData:n.treebfsObjectArr,chartLinks:n.treebfsObjectLinks,nodeWidth:t.nodeWidth,nodeHeight:t.nodeHeight,itemColor:t.color}},getGraphChangeIndex:function(t,e){return t.length==e.length+1}}},XY3D:function(t,e){},Y0XD:function(t,e,n){t.exports=n.p+"static/img/c4.b79623e.gif"},YFjE:function(t,e,n){t.exports=n.p+"static/img/c16.c0fd81b.gif"},YRCl:function(t,e,n){t.exports=n.p+"static/img/c14.5b6086c.gif"},Z7AR:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},aCWD:function(t,e,n){t.exports=n.p+"static/img/c6.92e13b1.gif"},bhGx:function(t,e,n){t.exports=n.p+"static/img/main1.143daff.jpg"},cYIv:function(t,e){},ch58:function(t,e){},"e/+E":function(t,e){},fd5U:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},gR1Q:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},"hda+":function(t,e,n){t.exports=n.p+"static/img/c2.026f5ea.gif"},infp:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},ivly:function(t,e,n){t.exports=n.p+"static/img/c18.49d30e7.gif"},lRwf:function(t,e){t.exports=Vue},oaD1:function(t,e,n){t.exports=n.p+"static/img/c12.ac653c4.gif"},"p/Nd":function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}();var n={initData:[],arrNow:[],showChart:null,dataChangeIndex:null,treepreorderObjectArr:[],treepreorderObjectLinks:[],changeChart:null,treepreorderDataChangeIndex:[-1]};n.posIdMap=new Map,n.dataClear=function(){n.initData=[],n.arrNow=[],n.showChart=null,n.dataChangeIndex=null,n.treepreorderObjectArr=[],n.treepreorderObjectLinks=[],n.changeChart=null,n.treepreorderDataChangeIndex=[-1],n.posIdMap=new Map},n.initTreePreorderDataChart=function(t,e){console.log("initTreePreorderChart");var n=echarts.init(t),o={title:{text:e.chartTitle},tooltip:{formatter:function(t){return t.data.name}},animationDurationUpdate:300,animationEasingUpdate:"quinticInOut",series:[{type:e.chartType,layout:"none",symbolSize:[e.nodeWidth,e.nodeHeight],legendHoverLink:!0,hoverAnimation:!0,roam:!1,width:e.seriesWidth,edgeSymbol:["circle","arrow"],edgeSymbolSize:[4,10],edgeLabel:{fontSize:20},label:{show:!0,position:"inside",textStyle:{color:"#130c0e",fontStyle:"normal",fontWeight:"bold",fontFamily:"sans-serif",fontSize:15}},itemStyle:{color:e.itemColor[0]},data:e.chartData,links:e.chartLinks,lineStyle:{color:"#409EFF",opacity:1,width:3,curveness:0}}]};return n.setOption(o),n},n.initTreePreorderChart=function(t){return l.setGraphData(n.arrNow,o.latestCode,n.treepreorderObjectArr,n.treepreorderObjectLinks),n.initTreePreorderDataChart(t,l.setGraphAttr(l.treepreorderAttr))},n.setTreePreorderChartOption=function(t,e,n,o){t.setOption({title:{text:o.chartTitle,subtext:"",subtextStyle:{color:"blue",fontWeight:"bold",fontSize:20}},series:[{type:o.chartType,layout:"none",symbolSize:[o.nodeWidth,o.nodeHeight],legendHoverLink:!0,hoverAnimation:!0,roam:!1,width:o.seriesWidth,edgeSymbol:["circle","arrow"],edgeSymbolSize:[4,10],edgeLabel:{fontSize:20},label:{show:!0,position:"inside",textStyle:{color:"#130c0e",fontStyle:"normal",fontWeight:"bold",fontFamily:"sans-serif",fontSize:15}},itemStyle:{color:-1!=n[0]?function(t){for(var l=[],a=0;a<e.length;a++)a==n[0]?l.push(o.itemColor[1]):l.push(o.itemColor[0]);return l[t.dataIndex]}:o.itemColor[0]},data:e,links:o.chartLinks,lineStyle:{opacity:1,width:3,curveness:0}}]})},n.treepreorderChangeChart=function(t,e,o,a){if(!t){for(let t=0;t<a.length;t++)a[t]=-1;n.treepreorderObjectArr.splice(0,n.treepreorderObjectArr.length),n.treepreorderObjectLinks.splice(0,n.treepreorderObjectLinks.length),ustc_vp.utils.sourceToDest(n.initData,o)}l.arrToTreePreorderChartDataObjArr(o,n.treepreorderObjectArr),n.treepreorderObjectLinks.splice(0,n.treepreorderObjectLinks.length);let r=n.treepreorderObjectArr.length;for(let t=1;t<r;t++){let e=n.treepreorderObjectArr[t].pos>>1;if(void 0==n.posIdMap.get(e))throw Error("当前节点没有父节点");n.treepreorderObjectLinks.push({source:n.posIdMap.get(e),target:n.treepreorderObjectArr[t].id,label:{normal:{show:!0,formatter:n.treepreorderObjectArr[t].direction}}})}n.setTreePreorderChartOption(e,n.treepreorderObjectArr,a,l.setGraphAttr(l.treepreorderAttr))};var o={workspace:null,outputArea:null,showCodeArea:null,hasMoreCode:!0,highlightPause:!1,codeInterpreter:null,latestCode:"",addCode:"",customizeApi:{},algAddCode:null,dataClear:function(){o.workspace=null,o.outputArea=null,o.showCodeArea=null,o.hasMoreCode=!0,o.highlightPause=!1,o.codeInterpreter=null,o.latestCode="",o.addCode="",o.customizeApi={},o.algAddCode=null},getWorkspaceXML:function(t){var e=null;try{if(window.ActiveXObject)(e=new ActiveXObject("Msxml2.DOMDocument")).async=!1,e.load(t);else{if(!document.implementation||!document.implementation.createDocument)throw Error("浏览器无内建的XML解析器！");var n=new window.XMLHttpRequest;n.open("GET",t,!1),n.send(null),e=n.responseXML.documentElement}}catch(t){throw Error("XML文件读取失败！"+t)}if(null==e)throw Error("XML文件读取失败！");return console.log("获取xml对象成功！"),e},initBlockly:function(t,e){console.log("initBlockly");var n={collapse:!0,comments:!1,disable:!0,maxBlocks:1/0,trashcan:!1,horizontalLayout:!1,toolboxPosition:"start",css:!0,media:e,rtl:!1,scrollbars:!0,sounds:!0,oneBasedIndex:!0};return Blockly.inject(t,n)},injectCustomizeApi:function(){o.algAddCode(),o.generateAddCodeToString(o.customizeApi)},updateShowCode:function(t,e){e.value=Blockly.JavaScript.workspaceToCode(t)},resetStepUi:function(t){o.workspace.highlightBlock(null),o.highlightPause=!1,t&&(o.outputArea.value="Program output:\n=================")},highlightBlock:function(t){o.workspace.highlightBlock(t),o.highlightPause=!0},initInterpretApi:function(t,e){t.setProperty(e,"alert",t.createNativeFunction(function(t){t=arguments.length?t:"",o.outputArea.value+="\n"+t}));t.setProperty(e,"highlightBlock",t.createNativeFunction(function(e){return e=String(e||""),t.createPrimitive(o.highlightBlock(e))}));for(let n in o.customizeApi)t.setProperty(e,n.toString(),t.createNativeFunction(o.customizeApi[n][1]))},addApi:function(t,e,n,o){t[e.toString()]=[n,o]},generateAddCodeToString:function(t){for(let e in t)o.addCode+=t[e][0]},generateCodeAndLoadIntoInterpreter:function(t,e){Blockly.JavaScript.STATEMENT_PREFIX="highlightBlock(%1);\n"+t,Blockly.JavaScript.addReservedWords("highlightBlock"),o.latestCode=Blockly.JavaScript.workspaceToCode(e),o.resetStepUi(!0)},getCurrInTreePosition:function(t,e){t==e?n.dataChangeIndex[0]=1:o.dfsInTree(t,e,1)},dfsInTree:function(t,e,l){return t==e?(n.dataChangeIndex[0]=l,!0):null!=t&&(o.dfsInTree(t.a.left,e,2*l)||o.dfsInTree(t.a.right,e,2*l+1))},getCurrWrapper:function(t,e){return void 0!=t&&void 0!=e&&(o.getCurrInTreePosition(t,e),n.dataChangeIndex[0]=n.posIdMap.get(n.dataChangeIndex[0]),!0)},gettreepreorderArgsWrapper:function(t,e){o.getCurrWrapper(t,e)&&n.changeChart(o.hasMoreCode,n.showChart,n.arrNow,n.dataChangeIndex)},printStrWrapper:function(t){console.log(t)},treepreorderAlgAddCode:function(){o.addApi(o.customizeApi,"gettreepreorderArgs","gettreepreorderArgs(root, curr);\n",o.gettreepreorderArgsWrapper)}},l={treepreorderAttr:{title:"树前序遍历算法",type:"graph",nodeWidth:50,nodeHeight:50,color:["#d71345","#ffe600"]},TreeNode:function(t,e,n){this.value=t,void 0==this.left?this.left=null:this.left=e,void 0==this.right?this.right=null:this.right=n},deserialize:function(t){if(0==t.length)return null;let e=new l.TreeNode(t[0]);t.shift();let n=[e];for(;n.length>0;){let e=n.shift(),o=t.shift();null!=o&&(e.left=new l.TreeNode(o),n.push(e.left));let a=t.shift();null!=a&&(e.right=new l.TreeNode(a),n.push(e.right))}return e},getTreeNodePosition:function(t){let e=[];if(null==t)return e;let n=[t],o=0;e.push({id:o++,name:"root\n"+t.value,pos:1,direction:null});let l=[1];for(;n.length>0;){let t=l.shift(),a=n.shift(),r=a.left;null!=r&&(l.push(2*t),e.push({id:o++,name:""+r.value,pos:2*t,direction:"left"}),n.push(r));let i=a.right;null!=i&&(l.push(2*t+1),e.push({id:o++,name:""+i.value,pos:2*t+1,direction:"right"}),n.push(i))}return e},setTreeNodeCoordinate:function(t){let e=ustc_vp.utils.getTopY(t[t.length-1].pos),n=ustc_vp.utils.getTreeCoordinate(e);for(let e in t){let o=t[e].pos;t[e].x=n[o-1].x,t[e].y=n[o-1].y}return t},getArrInitData:function(t){if(null==t||void 0==t||""==t)throw Error("getArrInitData()：获取初始化图表数据失败，Blockly未完全加载！！！");{let e=t.split(";"),o=-1;for(let t in e)if(-1!=(o=e[t].indexOf("deserialize(["))){o=t;break}if(-1==o)throw Error("getArrInitData()：没有数据！！！");let l=e[o];console.log("获取初始数据："+l);let a=l.split("[")[1].split("]")[0].split(",");for(let t in a)" null"!=a[t]?n.initData.push(parseInt(a[t])):n.initData.push(null);ustc_vp.utils.sourceToDest(n.initData,n.arrNow)}},arrToTreePreorderChartDataObjArr:function(t,e){if(0==e.length){let n=[];ustc_vp.utils.sourceToDest(t,n);let o=l.deserialize(n);ustc_vp.utils.sourceToDest(l.setTreeNodeCoordinate(l.getTreeNodePosition(o)),e)}},setGraphData:function(t,e,o,a){l.getArrInitData(e),l.arrToTreePreorderChartDataObjArr(t,o);let r=o.length;for(let t=0;t<r;t++)n.posIdMap.set(o[t].pos,o[t].id);for(let t=1;t<r;t++){let e=o[t].pos>>1;if(void 0==n.posIdMap.get(e))throw Error("当前节点没有父节点");a.push({source:n.posIdMap.get(e),target:o[t].id,label:{normal:{show:!0,formatter:o[t].direction}}})}},setGraphAttr:function(t){return{chartTitle:t.title,chartType:t.type,chartData:n.treepreorderObjectArr,chartLinks:n.treepreorderObjectLinks,nodeWidth:t.nodeWidth,nodeHeight:t.nodeHeight,itemColor:t.color}},getGraphChangeIndex:function(t,e){return t.length==e.length+1}}},ui9z:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}();var n={initData:[],arrNow:[],showChart:null,dataChangeIndex:null,treeposorderObjectArr:[],treeposorderObjectLinks:[],changeChart:null,treeposorderDataChangeIndex:[-1]};n.posIdMap=new Map,n.dataClear=function(){n.initData=[],n.arrNow=[],n.showChart=null,n.dataChangeIndex=null,n.treeposorderObjectArr=[],n.treeposorderObjectLinks=[],n.changeChart=null,n.treeposorderDataChangeIndex=[-1],n.posIdMap=new Map},n.initTreePosorderDataChart=function(t,e){console.log("initTreePosorderChart");var n=echarts.init(t),o={title:{text:e.chartTitle},tooltip:{formatter:function(t){return t.data.name}},animationDurationUpdate:300,animationEasingUpdate:"quinticInOut",series:[{type:e.chartType,layout:"none",symbolSize:[e.nodeWidth,e.nodeHeight],legendHoverLink:!0,hoverAnimation:!0,roam:!1,width:e.seriesWidth,edgeSymbol:["circle","arrow"],edgeSymbolSize:[4,10],edgeLabel:{fontSize:20},label:{show:!0,position:"inside",textStyle:{color:"#130c0e",fontStyle:"normal",fontWeight:"bold",fontFamily:"sans-serif",fontSize:15}},itemStyle:{color:e.itemColor[0]},data:e.chartData,links:e.chartLinks,lineStyle:{color:"#409EFF",opacity:1,width:3,curveness:0}}]};return n.setOption(o),n},n.initTreePosorderChart=function(t){return l.setGraphData(n.arrNow,o.latestCode,n.treeposorderObjectArr,n.treeposorderObjectLinks),n.initTreePosorderDataChart(t,l.setGraphAttr(l.treeposorderAttr))},n.setTreePosorderChartOption=function(t,e,n,o){t.setOption({title:{text:o.chartTitle,subtext:"",subtextStyle:{color:"blue",fontWeight:"bold",fontSize:20}},series:[{type:o.chartType,layout:"none",symbolSize:[o.nodeWidth,o.nodeHeight],legendHoverLink:!0,hoverAnimation:!0,roam:!1,width:o.seriesWidth,edgeSymbol:["circle","arrow"],edgeSymbolSize:[4,10],edgeLabel:{fontSize:20},label:{show:!0,position:"inside",textStyle:{color:"#130c0e",fontStyle:"normal",fontWeight:"bold",fontFamily:"sans-serif",fontSize:15}},itemStyle:{color:-1!=n[0]?function(t){for(var l=[],a=0;a<e.length;a++)a==n[0]?l.push(o.itemColor[1]):l.push(o.itemColor[0]);return l[t.dataIndex]}:o.itemColor[0]},data:e,links:o.chartLinks,lineStyle:{opacity:1,width:3,curveness:0}}]})},n.treeposorderChangeChart=function(t,e,o,a){if(!t){for(let t=0;t<a.length;t++)a[t]=-1;n.treeposorderObjectArr.splice(0,n.treeposorderObjectArr.length),n.treeposorderObjectLinks.splice(0,n.treeposorderObjectLinks.length),ustc_vp.utils.sourceToDest(n.initData,o)}l.arrToTreePosorderChartDataObjArr(o,n.treeposorderObjectArr),n.treeposorderObjectLinks.splice(0,n.treeposorderObjectLinks.length);let r=n.treeposorderObjectArr.length;for(let t=1;t<r;t++){let e=n.treeposorderObjectArr[t].pos>>1;if(void 0==n.posIdMap.get(e))throw Error("当前节点没有父节点");n.treeposorderObjectLinks.push({source:n.posIdMap.get(e),target:n.treeposorderObjectArr[t].id,label:{normal:{show:!0,formatter:n.treeposorderObjectArr[t].direction}}})}n.setTreePosorderChartOption(e,n.treeposorderObjectArr,a,l.setGraphAttr(l.treeposorderAttr))};var o={workspace:null,outputArea:null,showCodeArea:null,hasMoreCode:!0,highlightPause:!1,codeInterpreter:null,latestCode:"",addCode:"",customizeApi:{},algAddCode:null,dataClear:function(){o.workspace=null,o.outputArea=null,o.showCodeArea=null,o.hasMoreCode=!0,o.highlightPause=!1,o.codeInterpreter=null,o.latestCode="",o.addCode="",o.customizeApi={},o.algAddCode=null},getWorkspaceXML:function(t){var e=null;try{if(window.ActiveXObject)(e=new ActiveXObject("Msxml2.DOMDocument")).async=!1,e.load(t);else{if(!document.implementation||!document.implementation.createDocument)throw Error("浏览器无内建的XML解析器！");var n=new window.XMLHttpRequest;n.open("GET",t,!1),n.send(null),e=n.responseXML.documentElement}}catch(t){throw Error("XML文件读取失败！"+t)}if(null==e)throw Error("XML文件读取失败！");return console.log("获取xml对象成功！"),e},initBlockly:function(t,e){console.log("initBlockly");var n={collapse:!0,comments:!1,disable:!0,maxBlocks:1/0,trashcan:!1,horizontalLayout:!1,toolboxPosition:"start",css:!0,media:e,rtl:!1,scrollbars:!0,sounds:!0,oneBasedIndex:!0};return Blockly.inject(t,n)},injectCustomizeApi:function(){o.algAddCode(),o.generateAddCodeToString(o.customizeApi)},updateShowCode:function(t,e){e.value=Blockly.JavaScript.workspaceToCode(t)},resetStepUi:function(t){o.workspace.highlightBlock(null),o.highlightPause=!1,t&&(o.outputArea.value="Program output:\n=================")},highlightBlock:function(t){o.workspace.highlightBlock(t),o.highlightPause=!0},initInterpretApi:function(t,e){t.setProperty(e,"alert",t.createNativeFunction(function(t){t=arguments.length?t:"",o.outputArea.value+="\n"+t}));t.setProperty(e,"highlightBlock",t.createNativeFunction(function(e){return e=String(e||""),t.createPrimitive(o.highlightBlock(e))}));for(let n in o.customizeApi)t.setProperty(e,n.toString(),t.createNativeFunction(o.customizeApi[n][1]))},addApi:function(t,e,n,o){t[e.toString()]=[n,o]},generateAddCodeToString:function(t){for(let e in t)o.addCode+=t[e][0]},generateCodeAndLoadIntoInterpreter:function(t,e){Blockly.JavaScript.STATEMENT_PREFIX="highlightBlock(%1);\n"+t,Blockly.JavaScript.addReservedWords("highlightBlock"),o.latestCode=Blockly.JavaScript.workspaceToCode(e),o.resetStepUi(!0)},getCurrInTreePosition:function(t,e){t==e?n.dataChangeIndex[0]=1:o.dfsInTree(t,e,1)},dfsInTree:function(t,e,l){return t==e?(n.dataChangeIndex[0]=l,!0):null!=t&&(o.dfsInTree(t.a.left,e,2*l)||o.dfsInTree(t.a.right,e,2*l+1))},getCurrWrapper:function(t,e){return void 0!=t&&void 0!=e&&(o.getCurrInTreePosition(t,e),n.dataChangeIndex[0]=n.posIdMap.get(n.dataChangeIndex[0]),!0)},gettreeposorderArgsWrapper:function(t,e){o.getCurrWrapper(t,e)&&n.changeChart(o.hasMoreCode,n.showChart,n.arrNow,n.dataChangeIndex)},printStrWrapper:function(t){console.log(t)},treeposorderAlgAddCode:function(){o.addApi(o.customizeApi,"gettreeposorderArgs","gettreeposorderArgs(root, curr);\n",o.gettreeposorderArgsWrapper)}},l={treeposorderAttr:{title:"树后序遍历算法",type:"graph",nodeWidth:50,nodeHeight:50,color:["#d71345","#ffe600"]},TreeNode:function(t,e,n){this.value=t,void 0==this.left?this.left=null:this.left=e,void 0==this.right?this.right=null:this.right=n},deserialize:function(t){if(0==t.length)return null;let e=new l.TreeNode(t[0]);t.shift();let n=[e];for(;n.length>0;){let e=n.shift(),o=t.shift();null!=o&&(e.left=new l.TreeNode(o),n.push(e.left));let a=t.shift();null!=a&&(e.right=new l.TreeNode(a),n.push(e.right))}return e},getTreeNodePosition:function(t){let e=[];if(null==t)return e;let n=[t],o=0;e.push({id:o++,name:"root\n"+t.value,pos:1,direction:null});let l=[1];for(;n.length>0;){let t=l.shift(),a=n.shift(),r=a.left;null!=r&&(l.push(2*t),e.push({id:o++,name:""+r.value,pos:2*t,direction:"left"}),n.push(r));let i=a.right;null!=i&&(l.push(2*t+1),e.push({id:o++,name:""+i.value,pos:2*t+1,direction:"right"}),n.push(i))}return e},setTreeNodeCoordinate:function(t){let e=ustc_vp.utils.getTopY(t[t.length-1].pos),n=ustc_vp.utils.getTreeCoordinate(e);for(let e in t){let o=t[e].pos;t[e].x=n[o-1].x,t[e].y=n[o-1].y}return t},getArrInitData:function(t){if(null==t||void 0==t||""==t)throw Error("getArrInitData()：获取初始化图表数据失败，Blockly未完全加载！！！");{let e=t.split(";"),o=-1;for(let t in e)if(-1!=(o=e[t].indexOf("deserialize(["))){o=t;break}if(-1==o)throw Error("getArrInitData()：没有数据！！！");let l=e[o];console.log("获取初始数据："+l);let a=l.split("[")[1].split("]")[0].split(",");for(let t in a)" null"!=a[t]?n.initData.push(parseInt(a[t])):n.initData.push(null);ustc_vp.utils.sourceToDest(n.initData,n.arrNow)}},arrToTreePosorderChartDataObjArr:function(t,e){if(0==e.length){let n=[];ustc_vp.utils.sourceToDest(t,n);let o=l.deserialize(n);ustc_vp.utils.sourceToDest(l.setTreeNodeCoordinate(l.getTreeNodePosition(o)),e)}},setGraphData:function(t,e,o,a){l.getArrInitData(e),l.arrToTreePosorderChartDataObjArr(t,o);let r=o.length;for(let t=0;t<r;t++)n.posIdMap.set(o[t].pos,o[t].id);for(let t=1;t<r;t++){let e=o[t].pos>>1;if(void 0==n.posIdMap.get(e))throw Error("当前节点没有父节点");a.push({source:n.posIdMap.get(e),target:o[t].id,label:{normal:{show:!0,formatter:o[t].direction}}})}},setGraphAttr:function(t){return{chartTitle:t.title,chartType:t.type,chartData:n.treeposorderObjectArr,chartLinks:n.treeposorderObjectLinks,nodeWidth:t.nodeWidth,nodeHeight:t.nodeHeight,itemColor:t.color}},getGraphChangeIndex:function(t,e){return t.length==e.length+1}}},vsQK:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},w5qZ:function(t,e,n){t.exports=n.p+"static/img/c5.b70ab44.gif"},watx:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},y6Bo:function(t,e,n){t.exports=n.p+"static/img/c11.eb5fffb.gif"},yT9o:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},yhxP:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},ynMM:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},ywlS:function(t,e){!function(){if("undefined"==typeof echarts)throw Error("未引入Echarts，需要先引入Echarts");if("undefined"==typeof Blockly)throw Error("未引入Blockly，需要先引入Google Blockly");if("undefined"==typeof ustc_vp)throw Error("未引入ustc_vp，需要先引入ustc_vp_baseLib.js")}()},z7rs:function(t,e){}},["NHnr"]);