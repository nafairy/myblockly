let CollapseMap = new Map();
let BubbleSort_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>重复的遍历（走过）待排序的一组数字（通常是列表形式），依次比较两个相邻的元素" +
    "（数字），若它们的顺序错误则将它们调换一下位置，直至没有元素再需要交换为止。" +
    "因为每遍历一次列表，最大（或最小）的元素会经过交换一点点”浮“到列表的一端（顶端）， 所以形象的称这个算法为冒泡算法。</p><br>" +
    "<strong>具体步骤：</strong><br>" +
    "<ol>" +
    "<li>比较两个相邻元素，如果前一个比后一个大，则交换这两个相邻元素</li>" +
    "<li>从头至尾对每一对相邻元素进行步骤 1 的操作，完成 1 次对整个待排序数字列表的遍历后，最大的元素就放在了该列表的最后一个位置上了</li>" +
    "<li>对除最后一个元素的所有元素重复上述步骤，这第二次遍历后第二大的元素就也放在了正确   的位置（整个列表的倒数第二位置上）</li>" +
    "<p>不断重复上述步骤，每次遍历都会将一个元素放在正确的位置上，从而下次遍历的元素也会   随之减少一个，直至没有任何一对数字需要比较。</p>" +
    "</ol>" +
    "</div>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em;'>在已经有序的情况下不需要交换，最好情况为 O(n)；在无序的情况下要进行两次循环遍历所有元素最坏情况为 O(n^2)；" +
    "综上平均情况下为 O(n^2)</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'>算法稳定，但是它也可以变成不稳定的算法.。如果两个数相等，即相等的两个数字的相对位置在排序前后不变，" +
    "则该算法是稳定的," +
    "由定义可得在冒泡排序前后，相等元素没有发生位置的改变，所有冒泡排序算法是稳定的。当在代码交换条件中加上等号时为不稳定的。</p>" +
    "</div>",



  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> Bubble_Sort<span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span> <span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">for</span> j <span style=\"color: #ff7700;font-weight:bold;\">in</span> <span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span>-i-<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> L<span style=\"color: black;\">&#91;</span>j<span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">&gt;</span> L<span style=\"color: black;\">&#91;</span>j+<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\ttemp <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span>j<span style=\"color: black;\">&#93;</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tL<span style=\"color: black;\">&#91;</span>j<span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span>j+<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tL<span style=\"color: black;\">&#91;</span>j+<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">=</span> temp</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> L</div></li></ol></pre>"
};
let QuickSort_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;;font-size: 16px'> " +
    "<p>通过一趟排序将待排序列表分割成独立的两部分，其中一部分的所有元素都比另一部分小，然后再按此方法将独立的两部分分别继续重复进行此操作，" +
    "这个过程我们可以通过递归实现，从而达到最终将整个列表排序的目的。" + "</p><br>" +
    "<strong>具体步骤：</strong><br>" +
    "<ol>" +
    "<li>从待排序列表（数组）中选择一个元素作为基准（pivot），这里我们选择最后一个元素。</li>" +
    "<li>遍历列表，将所有小于基准的元素放在其前面，这样就可以将待排序列表分成两部分了递归地对每个部分进行 1、2 操作，" +
    "这里递归结束的条件是序列的大小为 0 或 1，此时递归结束，排序就已经完成了。</li>" +
    "</ol>" +
    "</div>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>快速排序的每一次划分把一个问题分解成两个子问题，其中的关系可以用下式表示： T[n] = 2T[n/2] + O(n)  其中 O(n)为 PARTITION()的时间复杂度，对比主定理，T [n] = aT[n/b] + f (n)由主定理 case2 可知，时间复杂度为 O(nlogn)；当在快速排序过程中随机选择算法选择最右端的极限时候，得到 T[n] = T[n-1] + T[1] + O(n)公式，由计算可得最坏时间复杂度为 O(n^2)。" +
    "</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'>算法不稳定。快速排序会设置两个指示位置的变量 i,j 对整个序列分别进行从左向右和从右向左的扫描，关键字的比较和交换是跳跃进行的，在这种情况下可知相同大小位置的数字会交换位置，所以快速排序是一种不稳定的排序方法。" +
    "</p>" +
    "</div>",

  code:"<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> Swap<span style=\"color: black;\">&#40;</span>L<span style=\"color: #66cc66;\">,</span>i<span style=\"color: #66cc66;\">,</span>j<span style=\"color: black;\">&#41;</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\ttemp <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tL<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span>j<span style=\"color: black;\">&#93;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tL<span style=\"color: black;\">&#91;</span>j<span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">=</span> temp</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> Partition<span style=\"color: black;\">&#40;</span>L<span style=\"color: #66cc66;\">,</span>left<span style=\"color: #66cc66;\">,</span>right<span style=\"color: black;\">&#41;</span>: </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tpivot <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span>right<span style=\"color: black;\">&#93;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\ttail <span style=\"color: #66cc66;\">=</span> left - <span style=\"color: #ff4500;\">1</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #808080; font-style: italic;\"># 将所有小于基准的数依次堆到前面</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span> <span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span>left<span style=\"color: #66cc66;\">,</span>right<span style=\"color: black;\">&#41;</span>: </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> L<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">&lt;=</span>\tpivot:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\ttail +<span style=\"color: #66cc66;\">=</span> <span style=\"color: #ff4500;\">1</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tSwap<span style=\"color: black;\">&#40;</span>L<span style=\"color: #66cc66;\">,</span>i<span style=\"color: #66cc66;\">,</span>tail<span style=\"color: black;\">&#41;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tSwap<span style=\"color: black;\">&#40;</span>L<span style=\"color: #66cc66;\">,</span>tail+<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span>right<span style=\"color: black;\">&#41;</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> tail + <span style=\"color: #ff4500;\">1</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> Quick_Sort<span style=\"color: black;\">&#40;</span>L<span style=\"color: #66cc66;\">,</span>left<span style=\"color: #66cc66;\">,</span>right<span style=\"color: black;\">&#41;</span>: </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> left <span style=\"color: #66cc66;\">&gt;=</span> right:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tpivot <span style=\"color: #66cc66;\">=</span> Partition<span style=\"color: black;\">&#40;</span>L<span style=\"color: #66cc66;\">,</span>left<span style=\"color: #66cc66;\">,</span>right<span style=\"color: black;\">&#41;</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tQuickSort_wujingqiao<span style=\"color: black;\">&#40;</span>L<span style=\"color: #66cc66;\">,</span>left<span style=\"color: #66cc66;\">,</span>pivot-<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tQuickSort_wujingqiao<span style=\"color: black;\">&#40;</span>L<span style=\"color: #66cc66;\">,</span>pivot+<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span>right<span style=\"color: black;\">&#41;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> L</div></li></ol></pre>"
};
let InsertSort_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>对于未排序元素，在已排序序列中从后向前扫描，找到相应位置把它插入进去；在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为新元素提供插入空间。</p><br>" +
    "<strong>具体步骤：</strong><br>" +
    "<ol>" +
    "<li>从第一个元素开始，默认该元素已被排好序</li>" +
    "<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>" +
    "<li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置</li>" +
    "<li>将新元素插入到该位置后</li>" +
    "<li>重复步骤 2~5</li>" +
    "</ol>" +
    "</div>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>在插入排序中，当待排序数组是有序时，是最优的情况，只需当前数跟前一个数比较一下就可以了，这时一共需要比较 N- 1 次，最好情况为 O(n)；当排序数组是逆序的，此时需要比较次数最多，总次数记为：1+2+3+…+N-1，所以，插入排序最坏情况下的时间复杂度为O(n^2)；平均来说，A[1..j-1]中的一半元素小于 A[j]，一半元素大于 A[j]。插入排序在平均情况运行时间与最坏情况运行时间一样，是输入规模的二次函数，所以时间复杂度为 O(n^2)</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'>算法稳定。插入排序时一个通过不断增加有序序列长度最终使整个序列变得有序的排序算法.所以我们只要设置插入的条件为,a[i]>a[j]那么在两个相同的元素比较时,必然原来在后  面的元素不会被放到原来在前面的元素之前.即它们的相对顺序是不变的。所以是稳定的。</p>" +
    "</div>"
  ,
  code:"<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> Insert_Sort<span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span> <span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span>: </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\ttemp <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tj <span style=\"color: #66cc66;\">=</span>\ti-<span style=\"color: #ff4500;\">1</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">while</span> L<span style=\"color: black;\">&#91;</span>j<span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">&gt;</span> temp <span style=\"color: #ff7700;font-weight:bold;\">and</span> j <span style=\"color: #66cc66;\">&gt;=</span> <span style=\"color: #ff4500;\">0</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tL<span style=\"color: black;\">&#91;</span>j+<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span>j<span style=\"color: black;\">&#93;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tj -<span style=\"color: #66cc66;\">=</span> <span style=\"color: #ff4500;\">1</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tL<span style=\"color: black;\">&#91;</span>j+<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">=</span> temp </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> L</div></li></ol></pre>"
};
let SelectSort_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>选择排序也很简单直观（其实这几种排序算法都很简单直观～&nbsp;&nbsp;。～），它的基本思想是： 先在待排序列表中找到最小（大）的元素，把它放在起始位置作为已排序序列；然后，再从剩余待排序序列中找到最小（大）的元素放在已排序序列的末尾，以此类推，直至完毕。</p><br>" +
    "<strong>具体步骤：</strong><br>" +
    "<p>初始状态整个待排序序列为无序序列，有序序列为空每次遍历无序序列将最小元素交换到有序序列之后 n-1 趟遍历后排序完成。</p>" +
    "</div>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>当已经有序的情况下是最好的情况为 O(1)；当在无序的情况下，交换操作介于 0  和 (n\n" +
    "- 1）次之间，选择排序的比较操作为 n (n - 1） / 2  次之间，由时间复杂度的规则可知为\n" +
    "O(n^2)；综上平均时间为 O(n^2)\n</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'>算法不稳定。由工作原理可知，算法每一次从待排序的数据元素中选出最小(或最大)的一个元素，存放在序列的起始(末尾)位置，直到全部待排序的数据元素排完，无论前后元素是否相等都和不相等的比较元素进行换位。所以选择排序是不稳定的排序方法。</p>" +
    "</div>",

 code:"<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #ff7700;font-weight:bold;\">def</span> Straight_Select_Sort<span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span>: </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">for</span> i <span style=\"color: #ff7700;font-weight:bold;\">in</span> <span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #008000;\">min</span> <span style=\"color: #66cc66;\">=</span> i</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">for</span> j <span style=\"color: #ff7700;font-weight:bold;\">in</span> <span style=\"color: #008000;\">range</span><span style=\"color: black;\">&#40;</span>i<span style=\"color: #66cc66;\">,</span><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span>: </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> L<span style=\"color: black;\">&#91;</span>j<span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">&lt;</span> L<span style=\"color: black;\">&#91;</span><span style=\"color: #008000;\">min</span><span style=\"color: black;\">&#93;</span>:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\t<span style=\"color: #008000;\">min</span> <span style=\"color: #66cc66;\">=</span> j <span style=\"color: #ff7700;font-weight:bold;\">if</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t<span style=\"color: #008000;\">min</span> <span style=\"color: #66cc66;\">!=</span> i:</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\ttemp <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tL<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">=</span> L<span style=\"color: black;\">&#91;</span><span style=\"color: #008000;\">min</span><span style=\"color: black;\">&#93;</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tL<span style=\"color: black;\">&#91;</span><span style=\"color: #008000;\">min</span><span style=\"color: black;\">&#93;</span> <span style=\"color: #66cc66;\">=</span> temp</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>L<span style=\"color: black;\">&#41;</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span>\tL</div></li></ol></pre>"
};
let MergeSort_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>递归的将两个已排序的序列合并成一个序列。</p><br>" +
    "<strong>具体步骤：</strong><br>" +
    "<ol>" +
    "<li>申请空间，其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>" +
    "<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>" +
    "<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>" +
    "</ol>" +
    "</div>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>因为归并排序调用有序数组排序函数时间复杂度为 O(n)，调用有序数组排序函数把数组划分为两部分，那每一小部分排序好所花时间则为 T[n/2]，由逻辑可得公式：T[n]\t=\t2T[n/2]\n" +
    " \n" +
    "+ O(n)；由主定理可解得平均情况为 T[n] = O( nlogn )。因为不管元素在什么情况下都要做这些步骤，所以花销的时间是不变的，所以该算法的最优时间复杂度和最差时间复杂度及平均时间复杂度都是一样的为：O( nlogn )。\n</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'>算法稳定。归并排序通过递归把一个由 n 个元素组成的序列分成 n 个长度为 1 的子序列,然后把它们两两合并,合并的过程是始终用两个有序序列的最顶端的值进行比较,对于归  并排序的稳定性的分析主要就是对归并过程的分析了,当我们在归并两个有序序列的时候,当他们最顶端的数字大小相同时,我们只需比较下标就可以了,对于下标小的我们优先取出,这  样就可以保证排序的稳定性了。</p>" +
    "</div>"
  ,
  code: "# 归并排序\n" +
    "def Merge(left, right): l, r = 0, 0\n" +
    "result = []\n" +
    "while l < len(left) and r < len(right):\t# 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置\n" +
    "if left[l] < right[r]: result.append(left[l]) l += 1\n" +
    "else:\n" +
    "result.append(right[r]) r += 1\n" +
    "result += left[l:]\t# 若最后 left 列表剩余，则将其剩余部分加入到 result 后面\n" +
    "result += right[r:]\t# 若最后 right 列表剩余，则将其剩余部分加入到 result 后面\n" +
    "return result\n" +
    "\n" +
    "def Merge_Sort(L): if len(L) <= 1:\n" +
    "return L mid = len(L) // 2\n" +
    "left = Merge_Sort(L[:mid]) right = Merge_Sort(L[mid:]) return Merge(left, right)\n"
};
let ArrayInsert_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>在一个已知的数组里，随机生成数值value和插入位置index，将插入位置后的数向后移一个位置，最后将value插入到index上。</p><br>",
  algAnalysis:
    "<div style='text-align: left;' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>在最好的情况下，index在尾部时，时间复杂度为O(1)；当index在首部时，因为每个数字都要向后移一个单位，遍历整个数组，所以时间复杂度为O(n)。综上平均时间复杂度为O(n)。</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'> 因为算法本身依次后移，当存在相同元素时不改变原来的位置，所以算法是稳定的。</p>" +
    "</div>"
  ,
  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">ArrayInsert<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">int</span> arr<span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> arr<span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#123;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">44</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">38</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">27</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">16</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">23</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">11</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">8</span><span style=\"color: black;\">&#125;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> value<span style=\"color: #66cc66;\">=</span><span style=\"color: #dc143c;\">random</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">50</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span>index<span style=\"color: #66cc66;\">=</span><span style=\"color: #dc143c;\">random</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>sizeof<span style=\"color: black;\">&#40;</span>arr<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> i<span style=\"color: #66cc66;\">=</span>sizeof<span style=\"color: black;\">&#40;</span>arr<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #ff7700;font-weight:bold;\">while</span><span style=\"color: black;\">&#40;</span>i<span style=\"color: #66cc66;\">&gt;</span>index<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">  <span style=\"color: #008000;\">int</span> temp<span style=\"color: #66cc66;\">=</span>arr<span style=\"color: black;\">&#91;</span>i-<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">  arr<span style=\"color: black;\">&#91;</span>i<span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">=</span>temp<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">  i<span style=\"color: #66cc66;\">=</span>i-<span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">arr<span style=\"color: black;\">&#91;</span>index<span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">=</span>value<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li></ol></pre>"
};
let ArrayDelete_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>在一个已知的数组里，随机生成删除位置index，将删除位置上的数据删除后，后边数据向前移。</p><br>",


  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>在最好的情况下，index在尾部时，时间复杂度为O(1)；当index在首部时，因为每个数字都要向后移一个单位，遍历整个数组，所以时间复杂度为O(n)。综上平均时间复杂度为O(n)。</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'> 因为算法本身依次后移，当存在相同元素时不改变原来的位置，所以算法是稳定的。</p>" +
    "</div>",
  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">ArrayDelete<span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">int</span> arr<span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> arr<span style=\"color: black;\">&#91;</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">=</span><span style=\"color: black;\">&#123;</span><span style=\"color: #ff4500;\">3</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">44</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">38</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">27</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">16</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">23</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">11</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">8</span><span style=\"color: black;\">&#125;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> tmp<span style=\"color: #66cc66;\">=</span>sizeof<span style=\"color: black;\">&#40;</span>arr<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">If<span style=\"color: black;\">&#40;</span>tmp<span style=\"color: #66cc66;\">&gt;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> index<span style=\"color: #66cc66;\">=</span><span style=\"color: #dc143c;\">random</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>tmp-<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">    <span style=\"color: #ff7700;font-weight:bold;\">if</span><span style=\"color: black;\">&#40;</span>index<span style=\"color: #66cc66;\">&lt;</span>tmp-<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">      <span style=\"color: #ff7700;font-weight:bold;\">for</span><span style=\"color: black;\">&#40;</span><span style=\"color: #008000;\">int</span> i<span style=\"color: #66cc66;\">=</span>index<span style=\"color: #66cc66;\">;</span>i<span style=\"color: #66cc66;\">&lt;=</span>tmp-<span style=\"color: #ff4500;\">2</span><span style=\"color: #66cc66;\">;</span>i++<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">        <span style=\"color: #008000;\">int</span> val<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">=</span>arr<span style=\"color: black;\">&#91;</span>i+<span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">,</span>val<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">=</span>arr<span style=\"color: black;\">&#91;</span>i+<span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">        Int tmp_val<span style=\"color: #66cc66;\">=</span>val<span style=\"color: black;\">&#91;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#93;</span><span style=\"color: #66cc66;\">;</span>  </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #ff7700;font-weight:bold;\">del</span><span style=\"color: black;\">&#40;</span>sizeof<span style=\"color: black;\">&#40;</span>arr<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">Cout<span style=\"color: #66cc66;\">&lt;&lt;</span>arr<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li></ol></pre>"
};
let LinkListDelete_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>在一个已知的链表里，在数值范围里随机生成要删除的数值，从头部开始循环遍历各个节点，直到等于要删除的数值，然后删除该节点，并且前向节点指向后边节点，然后算法停止。</p><br>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>在最好的情况下，随机生成的数据在首部时，时间复杂度为O(1)；当index在尾部时，因为每个节点都要遍历一遍，所以时间复杂度为O(n)。综上平均时间复杂度为O(n)。</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'>因为算法本身只是遍历，遇到匹配数据时，删除节点，完成指向后移，即时当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p>" +
    "</div>"
  ,
  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">LinkListDelete<span style=\"color: black;\">&#40;</span>List_point *linklist<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">Int val<span style=\"color: #66cc66;\">=</span><span style=\"color: #dc143c;\">random</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">10</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">List_point curr<span style=\"color: #66cc66;\">=</span>linklist-<span style=\"color: #66cc66;\">&gt;</span>head<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">While<span style=\"color: black;\">&#40;</span>curr<span style=\"color: #66cc66;\">!=</span>null<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">If<span style=\"color: black;\">&#40;</span>curr<span style=\"color: #66cc66;\">==</span>val<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">      If<span style=\"color: black;\">&#40;</span>curr-<span style=\"color: #66cc66;\">&gt;</span>value<span style=\"color: #66cc66;\">==</span>linklist-value<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">        Linklist-<span style=\"color: #66cc66;\">&gt;</span>head<span style=\"color: #66cc66;\">=</span>curr-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">      Else</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">       Previous-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">=</span>curr-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">len</span><span style=\"color: black;\">&#40;</span>linklist<span style=\"color: black;\">&#41;</span>--<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">Previous<span style=\"color: #66cc66;\">=</span>curr<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">Curr<span style=\"color: #66cc66;\">=</span>curr-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li></ol></pre>"
};
let LinkListInsert_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>在一个已知的链表里，在数值范围里随机生成要插入的数值和位置，从头部开始循环遍历到要插入的位置，将数值插入到指定位置，将该位置的上一个节点互相指向新节点，该位置的下一个节点互相指向新节点。</p><br>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>在最好的情况下，待插入位置在首部时，时间复杂度为O(1)；当待插入位置在尾部时，遍历整个链表，时间复杂度为O(n)。综上平均时间复杂度为O(n)。</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'> 算法完成遍历功能，因为当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p>" +
    "</div>"
  ,
  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">LinkListInsert<span style=\"color: black;\">&#40;</span>List_point *linklist<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tInt val<span style=\"color: #66cc66;\">=</span><span style=\"color: #dc143c;\">random</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">,</span><span style=\"color: #ff4500;\">10</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span>position<span style=\"color: #66cc66;\">=</span><span style=\"color: #dc143c;\">random</span><span style=\"color: black;\">&#40;</span><span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">,</span>sizeof<span style=\"color: black;\">&#40;</span>linklist<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">,</span>node<span style=\"color: #66cc66;\">=</span>null<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tList_point Curr<span style=\"color: #66cc66;\">=</span>linklist-<span style=\"color: #66cc66;\">&gt;</span>head<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tIf<span style=\"color: black;\">&#40;</span>position<span style=\"color: #66cc66;\">==</span><span style=\"color: #ff4500;\">0</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tNode-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">=</span>curr<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tLinklist-<span style=\"color: #66cc66;\">&gt;</span>head<span style=\"color: #66cc66;\">=</span>node<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tElse<span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tIndex<span style=\"color: #66cc66;\">=</span><span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tWhile<span style=\"color: black;\">&#40;</span>index<span style=\"color: #66cc66;\">&lt;</span>position<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tIndex++<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tCurr<span style=\"color: #66cc66;\">=</span>curr-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tNode-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">=</span>curr-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tCurr-<span style=\"color: #66cc66;\">&gt;</span>Next<span style=\"color: #66cc66;\">=</span>node<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tLen<span style=\"color: black;\">&#40;</span>linklist<span style=\"color: black;\">&#41;</span>++<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tCout<span style=\"color: #66cc66;\">&lt;&lt;</span>linklist<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li></ol></pre>"
};
let PreOrder_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>前序的规则就是根结点 ---> 左子树 ---> 右子树.在每个节点操作的操作中都遵循以上规则。对于前序，就是先访问(输出)该节点。在访问左孩子，其次访问右孩子，如果没有节点则跳过。直到没有节点为止，停止遍历。</p><br>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>在递归情况下，由公式 T(N) = a*T(N / b) + O (N^d)可得，代入公式得到：T(N)=2T(N/2)+O(1):，其中 a = 2, b = 2, d = 0;得到 log(2,2) = 1 > 0，代入公式 O(N ^ log(b,a)) = O(N^ log(2,2)) = O(N)</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'> 因为算法依次遍历节点，不改变节点的顺序，当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p>" +
    "</div>"
  ,
  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> PreOrderTraverse<span style=\"color: black;\">&#40;</span>BiTree T<span style=\"color: black;\">&#41;</span>//前序遍历</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>T<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span> //判T是否为空树</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tcout <span style=\"color: #66cc66;\">&lt;&lt;</span> T-<span style=\"color: #66cc66;\">&gt;</span>data<span style=\"color: #66cc66;\">;</span> //输出T节点的数据</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>PreOrderTraverse<span style=\"color: black;\">&#40;</span>T-<span style=\"color: #66cc66;\">&gt;</span>Ichild<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span> //递归遍历左子树</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>PreOrderTraverse<span style=\"color: black;\">&#40;</span>T-<span style=\"color: #66cc66;\">&gt;</span>rchild<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span> //递归遍历右子树</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> <span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">else</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> <span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">实现二：非递归前序，利用递归的思路，需要先放右节点进栈，再放左节点进栈，这个下次再取节点取到左节点，这个节点再右节点进栈，左节点进栈。然后循环一直到最后会一直优先取到左节点</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">public void qianxu3<span style=\"color: black;\">&#40;</span>node t<span style=\"color: black;\">&#41;</span>// 非递归前序 栈 先左后右  t一般为root</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tStack<span style=\"color: #66cc66;\">&lt;</span>node<span style=\"color: #66cc66;\">&gt;</span> q1 <span style=\"color: #66cc66;\">=</span> <span style=\"color: #dc143c;\">new</span> Stack<span style=\"color: #66cc66;\">&lt;</span>node<span style=\"color: #66cc66;\">&gt;</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t <span style=\"color: #66cc66;\">==</span> null<span style=\"color: black;\">&#41;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t <span style=\"color: #66cc66;\">!=</span> null<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tq1.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">while</span> <span style=\"color: black;\">&#40;</span><span style=\"color: #66cc66;\">!</span>q1.<span style=\"color: black;\">empty</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tnode t1 <span style=\"color: #66cc66;\">=</span> q1.<span style=\"color: black;\">pop</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">right</span> <span style=\"color: #66cc66;\">!=</span> null<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tq1.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">right</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">left</span> <span style=\"color: #66cc66;\">!=</span> null<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tq1.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">left</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tSystem.<span style=\"color: black;\">out</span>.<span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">value</span> + <span style=\"color: #483d8b;\">&quot; &quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">实现三：非递归实现，与中序遍历的方法类似，只不过需要修改输出时间，在进栈时候输入访问节点即可。</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">public void qianxu2<span style=\"color: black;\">&#40;</span>node t<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tStack<span style=\"color: #66cc66;\">&lt;</span>node<span style=\"color: #66cc66;\">&gt;</span> q1 <span style=\"color: #66cc66;\">=</span> <span style=\"color: #dc143c;\">new</span> Stack<span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>\t</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">while</span><span style=\"color: black;\">&#40;</span><span style=\"color: #66cc66;\">!</span>q1.<span style=\"color: black;\">isEmpty</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span>||t<span style=\"color: #66cc66;\">!=</span>null<span style=\"color: black;\">&#41;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t<span style=\"color: #66cc66;\">!=</span>null<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tSystem.<span style=\"color: black;\">out</span>.<span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>t.<span style=\"color: black;\">value</span>+<span style=\"color: #483d8b;\">&quot; &quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tq1.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>\t\t\t\t</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tt<span style=\"color: #66cc66;\">=</span>t.<span style=\"color: black;\">left</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t<span style=\"color: #ff7700;font-weight:bold;\">else</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tt<span style=\"color: #66cc66;\">=</span>q1.<span style=\"color: black;\">pop</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t\tt<span style=\"color: #66cc66;\">=</span>t.<span style=\"color: black;\">right</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li></ol></pre>"
};
let InOrder_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>中序的规则就是左子树 ---> 根结点 ---> 右子树.在每个节点操作的操作中都遵循以上规则。对于中序，就是先访问(输出)左孩子。在访问该节点，其次访问右孩子，如果没有节点则跳过。直到没有节点为止，停止遍历。</p><br>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>在递归情况下，由公式 T(N) = a*T(N / b) + O (N^d)可得，代入公式得到：T(N)=2T(N/2)+O(1):，其中 a = 2, b = 2, d = 0;得到 log(2,2) = 1 > 0，代入公式 O(N ^ log(b,a)) = O(N^ log(2,2)) = O(N)</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'>因为算法依次遍历节点，不改变节点的顺序，当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p>" +
    "</div>"
  ,
  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">实现一：递归实现</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> InOrderTraverse<span style=\"color: black;\">&#40;</span>BiTree T<span style=\"color: black;\">&#41;</span>//中序遍历</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>T<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span>//判T是否为空树，递归边界</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>InOrderTraverse<span style=\"color: black;\">&#40;</span>T-<span style=\"color: #66cc66;\">&gt;</span>Ichild<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>//递归遍历左子树</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tcout <span style=\"color: #66cc66;\">&lt;&lt;</span> T-<span style=\"color: #66cc66;\">&gt;</span>data<span style=\"color: #66cc66;\">;</span>//输出T节点的数据</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>InOrderTraverse<span style=\"color: black;\">&#40;</span>T-<span style=\"color: #66cc66;\">&gt;</span>rchild<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>//递归遍历右子树</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> <span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">else</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> <span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">实现二：非递归实现用栈储存实现。</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">它的规则大致为：栈依次存入左节点所有点，直到最左侧在栈顶。开始抛出栈顶并访问。<span style=\"color: black;\">&#40;</span>例如第一个抛出<span style=\"color: #ff4500;\">2</span><span style=\"color: black;\">&#41;</span>。如果有右节点。那么将右节点加入栈中，然后右节点一致左下遍历直到尾部。（这里<span style=\"color: #ff4500;\">5</span>和<span style=\"color: #ff4500;\">7</span>没有左节点，所以不加）但是如果抛出<span style=\"color: #ff4500;\">15</span>。右节点加入<span style=\"color: #ff4500;\">23</span>.再找<span style=\"color: #ff4500;\">23</span>的左侧节点加入栈顶。就这样循环下去直到栈为空。</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">public void zhongxu2<span style=\"color: black;\">&#40;</span>node t<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tStack<span style=\"color: #66cc66;\">&lt;</span>node<span style=\"color: #66cc66;\">&gt;</span> q1 <span style=\"color: #66cc66;\">=</span> <span style=\"color: #dc143c;\">new</span> Stack<span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>\t</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">while</span><span style=\"color: black;\">&#40;</span><span style=\"color: #66cc66;\">!</span>q1.<span style=\"color: black;\">isEmpty</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span>||t<span style=\"color: #66cc66;\">!=</span>null<span style=\"color: black;\">&#41;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t<span style=\"color: #66cc66;\">!=</span>null<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tq1.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tt<span style=\"color: #66cc66;\">=</span>t.<span style=\"color: black;\">left</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">else</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tt<span style=\"color: #66cc66;\">=</span>q1.<span style=\"color: black;\">pop</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tSystem.<span style=\"color: black;\">out</span>.<span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>t.<span style=\"color: black;\">value</span>+<span style=\"color: #483d8b;\">&quot; &quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tt<span style=\"color: #66cc66;\">=</span>t.<span style=\"color: black;\">right</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li></ol></pre>"
};
let PostOrder_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>中序的规则就是左子树 ---> 根结点 ---> 右子树.在每个节点操作的操作中都遵循以上规则。对于中序，就是先访问(输出)左孩子。在访问该节点，其次访问右孩子，如果没有节点则跳过。直到没有节点为止，停止遍历。</p><br>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>在递归情况下，由公式 T(N) = a*T(N / b) + O (N^d)可得，代入公式得到：T(N)=2T(N/2)+O(1):，其中 a = 2, b = 2, d = 0;得到 log(2,2) = 1 > 0，代入公式 O(N ^ log(b,a)) = O(N^ log(2,2)) = O(N)</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'> 因为算法依次遍历节点，不改变节点的顺序，当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p>" +
    "</div>"
  ,
  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">实现一：递归实现</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> PostOrderTraverse<span style=\"color: black;\">&#40;</span>BiTree T<span style=\"color: black;\">&#41;</span>//后序遍历</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>T<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#123;</span>//判T是否为空树</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span><span style=\"color: black;\">&#40;</span>PostOrderTraverse<span style=\"color: black;\">&#40;</span>T-<span style=\"color: #66cc66;\">&gt;</span>Ichild<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>//递归遍历左子树</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>PostOrderTraverse<span style=\"color: black;\">&#40;</span>T-<span style=\"color: #66cc66;\">&gt;</span>rchild<span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>//递归遍历右子树</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tcout <span style=\"color: #66cc66;\">&lt;&lt;</span> T-<span style=\"color: #66cc66;\">&gt;</span>data<span style=\"color: #66cc66;\">;</span>//输出T节点的数据</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> <span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">else</span> </div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> <span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">&nbsp;</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">实现二：非递归实现，利用栈的压栈出栈，但是要借助额外的标记次数，一个节点访问第二次才能输出。<span style=\"color: black;\">&#40;</span>这个访问第一次是入栈，第二次是子树解决完毕自己即将出栈（先不出栈）<span style=\"color: black;\">&#41;</span>。</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">A、入栈，第一次访问</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">B、即将出栈。第二次访问，</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">C、如果有右孩子，先不出栈把右孩子压入栈第一次访问，如果没右孩子。访问从栈中弹出。</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">D、循环重复，直到栈为空</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">public void houxu3<span style=\"color: black;\">&#40;</span>node t<span style=\"color: black;\">&#41;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tStack<span style=\"color: #66cc66;\">&lt;</span>node<span style=\"color: #66cc66;\">&gt;</span> q1 <span style=\"color: #66cc66;\">=</span> <span style=\"color: #dc143c;\">new</span> Stack<span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tStack<span style=\"color: #66cc66;\">&lt;</span>node<span style=\"color: #66cc66;\">&gt;</span> q2 <span style=\"color: #66cc66;\">=</span> <span style=\"color: #dc143c;\">new</span> Stack<span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t <span style=\"color: #66cc66;\">==</span> null<span style=\"color: black;\">&#41;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t <span style=\"color: #66cc66;\">!=</span> null<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tq1.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">while</span> <span style=\"color: black;\">&#40;</span><span style=\"color: #66cc66;\">!</span>q1.<span style=\"color: black;\">isEmpty</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tnode t1 <span style=\"color: #66cc66;\">=</span> q1.<span style=\"color: black;\">pop</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tq2.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t1<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">left</span> <span style=\"color: #66cc66;\">!=</span> null<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tq1.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">left</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">right</span> <span style=\"color: #66cc66;\">!=</span> null<span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tq1.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">right</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">while</span> <span style=\"color: black;\">&#40;</span><span style=\"color: #66cc66;\">!</span>q2.<span style=\"color: black;\">isEmpty</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span> <span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tnode t1 <span style=\"color: #66cc66;\">=</span> q2.<span style=\"color: black;\">pop</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tSystem.<span style=\"color: black;\">out</span>.<span style=\"color: #ff7700;font-weight:bold;\">print</span><span style=\"color: black;\">&#40;</span>t1.<span style=\"color: black;\">value</span> + <span style=\"color: #483d8b;\">&quot; &quot;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li></ol></pre>"
};
let LevelOrder_data = {
  idea:
    "<div style='text-align: left; text-indent: 2em;font-size: 16px'> " +
    "<p>按层遍历。我们知道一个节点有左右节点。而每一层一层的遍历都和左右节点有着很大的关系。也就是我们选用的数据结构不能一股脑的往一个方向钻，而左右应该均衡考虑。这样我们就选用队列来实现。\n" +
    "（1）对于队列，现进先出。从根节点的节点push到队列，那么队列中先出来的顺序是第二层的左右(假设有)。第二层每个执行的时候添加到队列，那么添加的所有节点都在第二层后面。\n" +
    "（2）同理，假设开始pop遍历第n层的节点，每个节点会push左右两个节点进去。但是队列先进先出。它会放到队尾(下一层)。直到第n层的最后一个pop出来，第n+1层的还在队列中整齐排着。这就达到一个层序的效果。\n</p><br>",

  algAnalysis:
    "<div style='text-align: left;font-size: 16px' >" +
    "<strong>时间复杂度：</strong>" +
    "<p style='text-indent: 2em'>利用一个辅助栈来进行每个节点的存储打印，所以每个节点都要进栈和出栈，是根据哪种遍历方式改变的是每个节点的进栈顺序，所以时间复杂度为O(n)，同样空间复杂度也为O(n)，n为结点数。</p>" +
    "<strong>稳定性：</strong>" +
    "<p style='text-indent: 2em'>因为算法依次遍历节点，不改变节点的顺序，当存在相同元素时不改变原来的位置顺序，所以算法是稳定的。</p>" +
    "</div>"
  ,

  code: "<pre class=\"python\" style=\"font-family:monospace;\"><ol><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: #008000;\">int</span> LevelOrderTraverse<span style=\"color: black;\">&#40;</span>BiTree T<span style=\"color: black;\">&#41;</span>//层序遍历</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>T <span style=\"color: #66cc66;\">==</span> NULL<span style=\"color: black;\">&#41;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> <span style=\"color: #ff4500;\">0</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tqueue<span style=\"color: #66cc66;\">&lt;</span>BiTree<span style=\"color: #66cc66;\">&gt;</span> Q<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tQ.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>T<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>//把根结点推入</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">while</span> <span style=\"color: black;\">&#40;</span><span style=\"color: #66cc66;\">!</span>Q.<span style=\"color: black;\">empty</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: black;\">&#41;</span>//循环结束之后再次判断，直到队列为空</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#123;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tcout <span style=\"color: #66cc66;\">&lt;&lt;</span> Q.<span style=\"color: black;\">front</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span>-<span style=\"color: #66cc66;\">&gt;</span>data<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>Q.<span style=\"color: black;\">front</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span>-<span style=\"color: #66cc66;\">&gt;</span>Ichild<span style=\"color: #66cc66;\">!=</span> NULL<span style=\"color: black;\">&#41;</span>//左节点进队列</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tQ.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>Q.<span style=\"color: black;\">front</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span>-<span style=\"color: #66cc66;\">&gt;</span>Ichild<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t<span style=\"color: #ff7700;font-weight:bold;\">if</span> <span style=\"color: black;\">&#40;</span>Q.<span style=\"color: black;\">front</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span>-<span style=\"color: #66cc66;\">&gt;</span>rchild <span style=\"color: #66cc66;\">!=</span> NULL<span style=\"color: black;\">&#41;</span>//右节点进队列</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\t\tQ.<span style=\"color: black;\">push</span><span style=\"color: black;\">&#40;</span>Q.<span style=\"color: black;\">front</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span>-<span style=\"color: #66cc66;\">&gt;</span>rchild<span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t\tQ.<span style=\"color: black;\">pop</span><span style=\"color: black;\">&#40;</span><span style=\"color: black;\">&#41;</span><span style=\"color: #66cc66;\">;</span>//队头出列</div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: black;\">&#125;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\tcout <span style=\"color: #66cc66;\">&lt;&lt;</span> endl<span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\">\t<span style=\"color: #ff7700;font-weight:bold;\">return</span> <span style=\"color: #ff4500;\">1</span><span style=\"color: #66cc66;\">;</span></div></li><li style=\"font-weight: normal; vertical-align:top;\"><div style=\"font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;\"><span style=\"color: black;\">&#125;</span></div></li></ol></pre>"
};

CollapseMap.set("bubbleSortAlg", BubbleSort_data);
CollapseMap.set("quickSortAlg", QuickSort_data);
CollapseMap.set("insertSortAlg", InsertSort_data);
CollapseMap.set("selectSortAlg", SelectSort_data);
CollapseMap.set("mergeSortAlg", MergeSort_data);
CollapseMap.set("arrayInsertAlg", ArrayInsert_data);
CollapseMap.set("arrayDeleteAlg", ArrayDelete_data);
CollapseMap.set("linklistInsertAlg", LinkListInsert_data);
CollapseMap.set("linklistDeleteAlg", LinkListDelete_data);
CollapseMap.set("treeBfsAlg", LevelOrder_data);
CollapseMap.set("treePreOrderAlg", PreOrder_data);
CollapseMap.set("treeInOrderAlg", InOrder_data);
CollapseMap.set("treePosOrderAlg", PostOrder_data);


export {CollapseMap}
